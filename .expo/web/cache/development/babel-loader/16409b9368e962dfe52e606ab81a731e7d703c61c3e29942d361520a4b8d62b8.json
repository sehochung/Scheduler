{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport COLORS from \"../../colors\";\nimport \"../../../src/styles/components/DailySchedule.css\";\nimport { jsx as _jsx, jsxs as _jsxs, Fragment as _Fragment } from \"react/jsx-runtime\";\nvar TOTAL_MINUTES_IN_DAY = 24 * 60;\nvar MINUTES_PER_PIXEL = 2;\nvar DEFAULT_MIN_TIMELINE_HEIGHT = 400;\nvar PADDING_HOURS = 2;\nvar DailySchedule = function DailySchedule(_ref) {\n  var _ref$tasks = _ref.tasks,\n    tasks = _ref$tasks === void 0 ? [] : _ref$tasks;\n  var convertTimeToMinutes = function convertTimeToMinutes(timeString) {\n    if (!timeString) return 0;\n    try {\n      var parts = timeString.split(' ');\n      if (parts.length !== 2) return 0;\n      var _parts = _slicedToArray(parts, 2),\n        time = _parts[0],\n        period = _parts[1];\n      var timeParts = time.split(':');\n      if (timeParts.length !== 2) return 0;\n      var hours = parseInt(timeParts[0], 10);\n      var minutes = parseInt(timeParts[1], 10);\n      if (isNaN(hours) || isNaN(minutes)) return 0;\n      if (period === 'PM' && hours < 12) {\n        hours += 12;\n      } else if (period === 'AM' && hours === 12) {\n        hours = 0;\n      }\n      return hours * 60 + minutes;\n    } catch (error) {\n      console.error(\"Error parsing time:\", error);\n      return 0;\n    }\n  };\n  var getVerticalPosition = function getVerticalPosition(minutes, startMinutes) {\n    if (!minutes || isNaN(minutes)) return 0;\n    var relativeMinutes = minutes - startMinutes;\n    var position = relativeMinutes / MINUTES_PER_PIXEL;\n    return Math.max(position, 0);\n  };\n  var getDurationHeight = function getDurationHeight(durationMinutes) {\n    if (!durationMinutes || isNaN(durationMinutes)) return 30;\n    var height = durationMinutes / MINUTES_PER_PIXEL;\n    return Math.max(height, 30);\n  };\n  var formatTime = function formatTime(minutes) {\n    var hours = Math.floor(minutes / 60);\n    var mins = minutes % 60;\n    var period = hours >= 12 ? 'PM' : 'AM';\n    var displayHours = hours % 12 === 0 ? 12 : hours % 12;\n    return displayHours + \":\" + mins.toString().padStart(2, '0') + \" \" + period;\n  };\n  var checkTaskOverlap = function checkTaskOverlap(newTask, existingTasks) {\n    if (!newTask || !newTask.startTime || !newTask.duration) {\n      return {\n        overlaps: false,\n        overlapsWith: null\n      };\n    }\n    var newTaskStart = convertTimeToMinutes(newTask.startTime);\n    var newTaskEnd = newTaskStart + (parseInt(newTask.duration, 10) || 0);\n    for (var task of existingTasks) {\n      if (!task || !task.startTime || !task.duration) continue;\n      var taskStart = convertTimeToMinutes(task.startTime);\n      var taskEnd = taskStart + (parseInt(task.duration, 10) || 0);\n      if (newTaskStart >= taskStart && newTaskStart < taskEnd || newTaskEnd > taskStart && newTaskEnd <= taskEnd || newTaskStart <= taskStart && newTaskEnd >= taskEnd) {\n        return {\n          overlaps: true,\n          overlapsWith: task\n        };\n      }\n    }\n    return {\n      overlaps: false,\n      overlapsWith: null\n    };\n  };\n  var sortedTasks = React.useMemo(function () {\n    try {\n      return _toConsumableArray(tasks).filter(function (task) {\n        return task && task.startTime;\n      }).sort(function (a, b) {\n        return convertTimeToMinutes(a.startTime) - convertTimeToMinutes(b.startTime);\n      });\n    } catch (error) {\n      console.error(\"Error sorting tasks:\", error);\n      return [];\n    }\n  }, [tasks]);\n  var timeRange = React.useMemo(function () {\n    if (!sortedTasks.length) {\n      return {\n        startMinutes: 0,\n        endMinutes: 0,\n        rangeInMinutes: 0,\n        timelineHeight: 0,\n        hourMarkers: []\n      };\n    }\n    try {\n      var earliestTask = sortedTasks[0];\n      var _startMinutes = convertTimeToMinutes(earliestTask.startTime);\n      _startMinutes = Math.floor(_startMinutes / 60) * 60;\n      _startMinutes = Math.max(0, _startMinutes - PADDING_HOURS * 60);\n      var latestEndMinutes = 0;\n      sortedTasks.forEach(function (task) {\n        var taskStartMinutes = convertTimeToMinutes(task.startTime);\n        var taskEndMinutes = taskStartMinutes + (parseInt(task.duration, 10) || 0);\n        latestEndMinutes = Math.max(latestEndMinutes, taskEndMinutes);\n      });\n      latestEndMinutes = Math.ceil(latestEndMinutes / 60) * 60 + PADDING_HOURS * 60;\n      latestEndMinutes = Math.min(latestEndMinutes, TOTAL_MINUTES_IN_DAY);\n      var minRangeMinutes = 4 * 60;\n      var _rangeInMinutes = Math.max(latestEndMinutes - _startMinutes, minRangeMinutes);\n      var _timelineHeight = Math.max(_rangeInMinutes / MINUTES_PER_PIXEL, DEFAULT_MIN_TIMELINE_HEIGHT);\n      var _hourMarkers = [];\n      var startHour = Math.floor(_startMinutes / 60);\n      var endHour = Math.ceil(latestEndMinutes / 60);\n      for (var hour = startHour; hour <= endHour; hour++) {\n        var hourInMinutes = hour * 60;\n        var relativePosition = hourInMinutes - _startMinutes;\n        var position = relativePosition / MINUTES_PER_PIXEL;\n        if (position >= 0) {\n          _hourMarkers.push({\n            hour: hour,\n            position: position,\n            label: hour === 0 || hour === 24 ? '12:00 AM' : hour === 12 ? '12:00 PM' : hour > 12 ? hour - 12 + \":00 PM\" : hour + \":00 AM\"\n          });\n        }\n      }\n      return {\n        startMinutes: _startMinutes,\n        endMinutes: latestEndMinutes,\n        rangeInMinutes: _rangeInMinutes,\n        timelineHeight: _timelineHeight,\n        hourMarkers: _hourMarkers\n      };\n    } catch (error) {\n      console.error(\"Error calculating time range:\", error);\n      return {\n        startMinutes: 0,\n        endMinutes: 0,\n        rangeInMinutes: 0,\n        timelineHeight: 0,\n        hourMarkers: []\n      };\n    }\n  }, [sortedTasks]);\n  var startMinutes = timeRange.startMinutes,\n    endMinutes = timeRange.endMinutes,\n    rangeInMinutes = timeRange.rangeInMinutes,\n    timelineHeight = timeRange.timelineHeight,\n    hourMarkers = timeRange.hourMarkers;\n  React.useEffect(function () {\n    console.log(\"Rendered tasks:\", sortedTasks);\n  }, [sortedTasks]);\n  return _jsxs(View, {\n    style: styles.container,\n    children: [_jsx(Text, {\n      style: styles.title,\n      children: \"Daily Schedule\"\n    }), sortedTasks.length === 0 ? _jsx(View, {\n      style: styles.emptyState,\n      children: _jsx(Text, {\n        style: styles.emptyStateText,\n        children: \"No tasks scheduled for today. Add tasks to see your daily schedule.\"\n      })\n    }) : _jsxs(_Fragment, {\n      children: [Platform.OS === 'web' && _jsx(\"div\", {\n        className: \"daily-schedule-container\",\n        children: _jsxs(\"div\", {\n          className: \"timeline-container\",\n          children: [_jsx(\"div\", {\n            className: \"hour-markers\",\n            children: hourMarkers.map(function (marker, i) {\n              return _jsx(\"div\", {\n                className: \"hour-marker\",\n                style: {\n                  top: marker.position + \"px\"\n                },\n                children: _jsx(\"span\", {\n                  className: \"hour-label\",\n                  children: marker.label\n                })\n              }, i);\n            })\n          }), _jsxs(\"div\", {\n            className: \"timeline\",\n            style: {\n              height: timelineHeight + \"px\"\n            },\n            children: [hourMarkers.map(function (marker, i) {\n              return _jsx(\"div\", {\n                className: \"hour-grid-line\",\n                style: {\n                  top: marker.position + \"px\"\n                }\n              }, \"grid-\" + i);\n            }), sortedTasks.map(function (task, index) {\n              if (!task || !task.startTime || !task.duration) {\n                return null;\n              }\n              try {\n                var taskStartMinutes = convertTimeToMinutes(task.startTime);\n                var topPosition = getVerticalPosition(taskStartMinutes, startMinutes);\n                var height = getDurationHeight(parseInt(task.duration, 10) || 30);\n                return _jsxs(\"div\", {\n                  className: \"task-block\",\n                  style: {\n                    top: topPosition + \"px\",\n                    height: height + \"px\",\n                    backgroundColor: task.color || COLORS.primary\n                  },\n                  children: [_jsx(\"div\", {\n                    className: \"task-title\",\n                    children: task.name || 'Untitled Task'\n                  }), _jsxs(\"div\", {\n                    className: \"task-details\",\n                    children: [task.startTime, \" \\u2022 \", task.duration || 0, \" min\"]\n                  })]\n                }, index);\n              } catch (error) {\n                console.error(\"Error rendering task:\", error, task);\n                return null;\n              }\n            }), _jsx(\"div\", {\n              className: \"time-range-info\",\n              children: _jsxs(\"small\", {\n                children: [formatTime(startMinutes), \" - \", formatTime(endMinutes)]\n              })\n            })]\n          })]\n        })\n      }), Platform.OS !== 'web' && _jsx(ScrollView, {\n        style: styles.mobileTimeline,\n        children: _jsxs(View, {\n          style: [styles.timelineContent, {\n            height: timelineHeight\n          }],\n          children: [_jsx(View, {\n            style: styles.hourMarkersContainer,\n            children: hourMarkers.map(function (marker, i) {\n              return _jsxs(View, {\n                style: [styles.hourMarker, {\n                  top: marker.position\n                }],\n                children: [_jsx(Text, {\n                  style: styles.hourLabel,\n                  children: marker.label\n                }), _jsx(View, {\n                  style: styles.hourLine\n                })]\n              }, i);\n            })\n          }), _jsx(View, {\n            style: styles.taskBlocksContainer,\n            children: sortedTasks.map(function (task, index) {\n              if (!task || !task.startTime || !task.duration) {\n                return null;\n              }\n              try {\n                var taskStartMinutes = convertTimeToMinutes(task.startTime);\n                var topPosition = getVerticalPosition(taskStartMinutes, startMinutes);\n                var duration = parseInt(task.duration, 10) || 30;\n                var height = getDurationHeight(duration);\n                return _jsxs(View, {\n                  style: [styles.taskBlock, {\n                    position: 'absolute',\n                    top: topPosition,\n                    height: height,\n                    left: 0,\n                    right: 0,\n                    backgroundColor: task.color || COLORS.primary\n                  }],\n                  children: [_jsx(Text, {\n                    style: styles.taskTitle,\n                    numberOfLines: 1,\n                    children: task.name || 'Untitled Task'\n                  }), _jsxs(Text, {\n                    style: styles.taskDuration,\n                    children: [task.startTime, \" \\u2022 \", task.duration || 0, \" min\"]\n                  })]\n                }, index);\n              } catch (error) {\n                console.error(\"Error rendering mobile task:\", error, task);\n                return null;\n              }\n            })\n          })]\n        })\n      })]\n    })]\n  });\n};\nvar styles = StyleSheet.create({\n  container: {\n    backgroundColor: COLORS.cardBackground,\n    borderRadius: 12,\n    padding: 16,\n    marginVertical: 10,\n    shadowColor: COLORS.black,\n    shadowOffset: {\n      width: 0,\n      height: 2\n    },\n    shadowOpacity: 0.1,\n    shadowRadius: 4,\n    elevation: 3,\n    borderLeftWidth: 4,\n    borderLeftColor: COLORS.primary\n  },\n  title: {\n    fontSize: 18,\n    fontWeight: 'bold',\n    marginBottom: 15,\n    color: COLORS.black\n  },\n  emptyState: {\n    padding: 20,\n    alignItems: 'center',\n    justifyContent: 'center',\n    backgroundColor: COLORS.secondaryLight,\n    borderRadius: 8,\n    marginTop: 20\n  },\n  emptyStateText: {\n    color: COLORS.secondaryDark,\n    textAlign: 'center',\n    fontStyle: 'italic'\n  },\n  mobileTimeline: {\n    height: 500,\n    marginVertical: 10\n  },\n  timelineContent: {\n    position: 'relative',\n    flexDirection: 'row'\n  },\n  hourMarkersContainer: {\n    width: 60,\n    position: 'absolute',\n    top: 0,\n    left: 0,\n    bottom: 0,\n    borderRightWidth: 1,\n    borderRightColor: COLORS.secondary\n  },\n  hourMarker: {\n    position: 'absolute',\n    left: 0,\n    width: 60,\n    alignItems: 'flex-start'\n  },\n  hourLabel: {\n    fontSize: 10,\n    color: COLORS.secondaryDark,\n    marginLeft: 5\n  },\n  hourLine: {\n    position: 'absolute',\n    left: 60,\n    right: -500,\n    height: 1,\n    backgroundColor: 'rgba(0,0,0,0.05)'\n  },\n  taskBlocksContainer: {\n    position: 'absolute',\n    top: 0,\n    left: 70,\n    right: 10,\n    bottom: 0\n  },\n  taskBlock: {\n    borderRadius: 4,\n    padding: 8,\n    justifyContent: 'center'\n  },\n  taskTitle: {\n    color: COLORS.white,\n    fontWeight: 'bold',\n    fontSize: 12\n  },\n  taskDuration: {\n    color: COLORS.white,\n    fontSize: 10,\n    opacity: 0.9,\n    marginTop: 4\n  }\n});\nexport default DailySchedule;","map":{"version":3,"names":["React","View","Text","StyleSheet","ScrollView","Platform","COLORS","jsx","_jsx","jsxs","_jsxs","Fragment","_Fragment","TOTAL_MINUTES_IN_DAY","MINUTES_PER_PIXEL","DEFAULT_MIN_TIMELINE_HEIGHT","PADDING_HOURS","DailySchedule","_ref","_ref$tasks","tasks","convertTimeToMinutes","timeString","parts","split","length","_parts","_slicedToArray","time","period","timeParts","hours","parseInt","minutes","isNaN","error","console","getVerticalPosition","startMinutes","relativeMinutes","position","Math","max","getDurationHeight","durationMinutes","height","formatTime","floor","mins","displayHours","toString","padStart","checkTaskOverlap","newTask","existingTasks","startTime","duration","overlaps","overlapsWith","newTaskStart","newTaskEnd","task","taskStart","taskEnd","sortedTasks","useMemo","_toConsumableArray","filter","sort","a","b","timeRange","endMinutes","rangeInMinutes","timelineHeight","hourMarkers","earliestTask","latestEndMinutes","forEach","taskStartMinutes","taskEndMinutes","ceil","min","minRangeMinutes","startHour","endHour","hour","hourInMinutes","relativePosition","push","label","useEffect","log","style","styles","container","children","title","emptyState","emptyStateText","OS","className","map","marker","i","top","index","topPosition","backgroundColor","color","primary","name","mobileTimeline","timelineContent","hourMarkersContainer","hourMarker","hourLabel","hourLine","taskBlocksContainer","taskBlock","left","right","taskTitle","numberOfLines","taskDuration","create","cardBackground","borderRadius","padding","marginVertical","shadowColor","black","shadowOffset","width","shadowOpacity","shadowRadius","elevation","borderLeftWidth","borderLeftColor","fontSize","fontWeight","marginBottom","alignItems","justifyContent","secondaryLight","marginTop","secondaryDark","textAlign","fontStyle","flexDirection","bottom","borderRightWidth","borderRightColor","secondary","marginLeft","white","opacity"],"sources":["C:/Users/Seho/Desktop/Seho/Personal Projects/Claude/scheduler_app/src/components/DailySchedule/DailySchedule.js"],"sourcesContent":["import React from 'react';\nimport { View, Text, StyleSheet, ScrollView, Platform } from 'react-native';\nimport COLORS from '../../colors';\nimport '../../../src/styles/components/DailySchedule.css';\n\n// Constants for timeline calculations - defined outside component for StyleSheet access\nconst TOTAL_MINUTES_IN_DAY = 24 * 60; // 24 hours = 1440 minutes\nconst MINUTES_PER_PIXEL = 2; // 1 minute = 2 pixels height\nconst DEFAULT_MIN_TIMELINE_HEIGHT = 400; // Minimum height when tasks exist\nconst PADDING_HOURS = 2; // Add 2 hours padding before first task and after last task\n\nconst DailySchedule = ({ tasks = [] }) => {\n  /**\n   * Converts a time string (e.g., \"12:00 AM\") to minutes since midnight\n   * @param {string} timeString - Time in format \"HH:MM AM/PM\"\n   * @return {number} Minutes since midnight\n   */\n  const convertTimeToMinutes = (timeString) => {\n    if (!timeString) return 0;\n    \n    try {\n      // Parse the time string\n      const parts = timeString.split(' ');\n      if (parts.length !== 2) return 0;\n      \n      const [time, period] = parts;\n      const timeParts = time.split(':');\n      if (timeParts.length !== 2) return 0;\n      \n      let hours = parseInt(timeParts[0], 10);\n      let minutes = parseInt(timeParts[1], 10);\n      \n      if (isNaN(hours) || isNaN(minutes)) return 0;\n      \n      // Convert to 24-hour format\n      if (period === 'PM' && hours < 12) {\n        hours += 12;\n      } else if (period === 'AM' && hours === 12) {\n        hours = 0;\n      }\n      \n      // Calculate total minutes since midnight\n      return hours * 60 + minutes;\n    } catch (error) {\n      console.error(\"Error parsing time:\", error);\n      return 0;\n    }\n  };\n  \n  /**\n   * Converts minutes since midnight to a vertical position in pixels\n   * relative to the dynamic range's start time\n   * @param {number} minutes - Minutes since midnight\n   * @param {number} startMinutes - Start minutes of the range\n   * @return {number} Vertical position in pixels\n   */\n  const getVerticalPosition = (minutes, startMinutes) => {\n    if (!minutes || isNaN(minutes)) return 0;\n    \n    // Calculate position relative to the range start\n    const relativeMinutes = minutes - startMinutes;\n    \n    // Convert minutes to pixels (default is MINUTES_PER_PIXEL)\n    const position = relativeMinutes / MINUTES_PER_PIXEL;\n    \n    // Ensure position is not negative (shouldn't happen with our range calculation)\n    return Math.max(position, 0);\n  };\n  \n  /**\n   * Converts duration in minutes to height in pixels\n   * @param {number} durationMinutes - Duration in minutes\n   * @return {number} Height in pixels\n   */\n  const getDurationHeight = (durationMinutes) => {\n    if (!durationMinutes || isNaN(durationMinutes)) return 30; // Default minimum height\n    \n    // Convert duration to height using our pixel ratio\n    const height = durationMinutes / MINUTES_PER_PIXEL;\n    \n    // Ensure height is reasonable (minimum 30px for visibility)\n    return Math.max(height, 30);\n  };\n  \n  /**\n   * Formats time for display (e.g., 9:30 AM)\n   * @param {number} minutes - Minutes since midnight\n   * @return {string} Formatted time string\n   */\n  const formatTime = (minutes) => {\n    const hours = Math.floor(minutes / 60);\n    const mins = minutes % 60;\n    \n    // Convert to 12-hour format\n    const period = hours >= 12 ? 'PM' : 'AM';\n    const displayHours = hours % 12 === 0 ? 12 : hours % 12;\n    \n    return `${displayHours}:${mins.toString().padStart(2, '0')} ${period}`;\n  };\n  \n  /**\n   * Checks if a new task overlaps with any existing task\n   * @param {Object} newTask - The task to check for overlaps\n   * @param {Array} existingTasks - Array of existing tasks\n   * @return {Object} { overlaps: boolean, overlapsWith: task or null }\n   */\n  const checkTaskOverlap = (newTask, existingTasks) => {\n    if (!newTask || !newTask.startTime || !newTask.duration) {\n      return { overlaps: false, overlapsWith: null };\n    }\n    \n    const newTaskStart = convertTimeToMinutes(newTask.startTime);\n    const newTaskEnd = newTaskStart + (parseInt(newTask.duration, 10) || 0);\n    \n    for (const task of existingTasks) {\n      if (!task || !task.startTime || !task.duration) continue;\n      \n      const taskStart = convertTimeToMinutes(task.startTime);\n      const taskEnd = taskStart + (parseInt(task.duration, 10) || 0);\n      \n      // Check for overlap: new task starts during existing task or ends during existing task\n      // or completely encompasses an existing task\n      if ((newTaskStart >= taskStart && newTaskStart < taskEnd) || \n          (newTaskEnd > taskStart && newTaskEnd <= taskEnd) ||\n          (newTaskStart <= taskStart && newTaskEnd >= taskEnd)) {\n        return { overlaps: true, overlapsWith: task };\n      }\n    }\n    \n    return { overlaps: false, overlapsWith: null };\n  };\n  \n  // Sort tasks by start time with error handling\n  const sortedTasks = React.useMemo(() => {\n    try {\n      return [...tasks].filter(task => task && task.startTime).sort((a, b) => {\n        return convertTimeToMinutes(a.startTime) - convertTimeToMinutes(b.startTime);\n      });\n    } catch (error) {\n      console.error(\"Error sorting tasks:\", error);\n      return [];\n    }\n  }, [tasks]);\n  \n  /**\n   * Calculate the dynamic time range for the schedule\n   * Returns: { startMinutes, endMinutes, rangeInMinutes, timelineHeight, hourMarkers }\n   */\n  const timeRange = React.useMemo(() => {\n    // If no tasks, don't calculate a range\n    if (!sortedTasks.length) {\n      return {\n        startMinutes: 0,\n        endMinutes: 0,\n        rangeInMinutes: 0,\n        timelineHeight: 0,\n        hourMarkers: []\n      };\n    }\n    \n    try {\n      // Find earliest start time\n      const earliestTask = sortedTasks[0]; // Tasks are already sorted by start time\n      let startMinutes = convertTimeToMinutes(earliestTask.startTime);\n      \n      // Round down to the nearest hour for cleaner display and subtract PADDING_HOURS\n      startMinutes = Math.floor(startMinutes / 60) * 60;\n      startMinutes = Math.max(0, startMinutes - (PADDING_HOURS * 60)); // Add padding but don't go below 0\n      \n      // Find latest end time (start time + duration)\n      let latestEndMinutes = 0;\n      sortedTasks.forEach(task => {\n        const taskStartMinutes = convertTimeToMinutes(task.startTime);\n        const taskEndMinutes = taskStartMinutes + (parseInt(task.duration, 10) || 0);\n        latestEndMinutes = Math.max(latestEndMinutes, taskEndMinutes);\n      });\n      \n      // Round up to the nearest hour for cleaner display and add padding\n      latestEndMinutes = Math.ceil(latestEndMinutes / 60) * 60 + (PADDING_HOURS * 60);\n      latestEndMinutes = Math.min(latestEndMinutes, TOTAL_MINUTES_IN_DAY); // Don't exceed 24 hours\n      \n      // Ensure a minimum range of 4 hours for visibility\n      const minRangeMinutes = 4 * 60;\n      const rangeInMinutes = Math.max(latestEndMinutes - startMinutes, minRangeMinutes);\n      \n      // Calculate timeline height based on range (1 minute = MINUTES_PER_PIXEL pixels)\n      const timelineHeight = Math.max(\n        rangeInMinutes / MINUTES_PER_PIXEL,\n        DEFAULT_MIN_TIMELINE_HEIGHT\n      );\n      \n      // Calculate hour markers within our range\n      const hourMarkers = [];\n      const startHour = Math.floor(startMinutes / 60);\n      const endHour = Math.ceil(latestEndMinutes / 60);\n      \n      for (let hour = startHour; hour <= endHour; hour++) {\n        const hourInMinutes = hour * 60;\n        const relativePosition = hourInMinutes - startMinutes; // Position relative to our start\n        const position = relativePosition / MINUTES_PER_PIXEL;\n        \n        if (position >= 0) { // Only include hours within our range\n          hourMarkers.push({\n            hour,\n            position, \n            label: hour === 0 || hour === 24 ? '12:00 AM' : \n                   hour === 12 ? '12:00 PM' : \n                   hour > 12 ? `${hour-12}:00 PM` : \n                   `${hour}:00 AM`\n          });\n        }\n      }\n      \n      return {\n        startMinutes,\n        endMinutes: latestEndMinutes,\n        rangeInMinutes,\n        timelineHeight,\n        hourMarkers\n      };\n    } catch (error) {\n      console.error(\"Error calculating time range:\", error);\n      return {\n        startMinutes: 0,\n        endMinutes: 0,\n        rangeInMinutes: 0,\n        timelineHeight: 0,\n        hourMarkers: []\n      };\n    }\n  }, [sortedTasks]);\n  \n  // Extract values from the calculated time range\n  const { startMinutes, endMinutes, rangeInMinutes, timelineHeight, hourMarkers } = timeRange;\n  \n  // Debug log to check tasks (can remove in production)\n  React.useEffect(() => {\n    console.log(\"Rendered tasks:\", sortedTasks);\n  }, [sortedTasks]);\n  \n  return (\n    <View style={styles.container}>\n      <Text style={styles.title}>Daily Schedule</Text>\n      \n      {/* When there are no tasks, show empty state message */}\n      {sortedTasks.length === 0 ? (\n        <View style={styles.emptyState}>\n          <Text style={styles.emptyStateText}>\n            No tasks scheduled for today. Add tasks to see your daily schedule.\n          </Text>\n        </View>\n      ) : (\n        /* Only render the timeline when tasks exist */\n        <>\n          {/* Web Timeline View */}\n          {Platform.OS === 'web' && (\n            <div className=\"daily-schedule-container\">\n              <div className=\"timeline-container\">\n                {/* Hour markers column */}\n                <div className=\"hour-markers\">\n                  {hourMarkers.map((marker, i) => (\n                    <div \n                      key={i} \n                      className=\"hour-marker\"\n                      style={{ top: `${marker.position}px` }}\n                    >\n                      <span className=\"hour-label\">{marker.label}</span>\n                    </div>\n                  ))}\n                </div>\n                \n                {/* Timeline with tasks - height is dynamically calculated */}\n                <div className=\"timeline\" style={{ height: `${timelineHeight}px` }}>\n                  {/* Hour grid lines */}\n                  {hourMarkers.map((marker, i) => (\n                    <div\n                      key={`grid-${i}`}\n                      className=\"hour-grid-line\"\n                      style={{ top: `${marker.position}px` }}\n                    />\n                  ))}\n                  \n                  {/* Task blocks */}\n                  {sortedTasks.map((task, index) => {\n                    if (!task || !task.startTime || !task.duration) {\n                      return null; // Skip invalid tasks\n                    }\n                    \n                    try {\n                      // Calculate position relative to our dynamic range start\n                      const taskStartMinutes = convertTimeToMinutes(task.startTime);\n                      const topPosition = getVerticalPosition(taskStartMinutes, startMinutes);\n                      const height = getDurationHeight(parseInt(task.duration, 10) || 30);\n                      \n                      return (\n                        <div\n                          key={index}\n                          className=\"task-block\"\n                          style={{\n                            top: `${topPosition}px`,\n                            height: `${height}px`,\n                            backgroundColor: task.color || COLORS.primary,\n                          }}\n                        >\n                          <div className=\"task-title\">\n                            {/* Ensure task name is always shown, even if undefined */}\n                            {task.name || 'Untitled Task'}\n                          </div>\n                          <div className=\"task-details\">\n                            {task.startTime} • {task.duration || 0} min\n                          </div>\n                        </div>\n                      );\n                    } catch (error) {\n                      console.error(\"Error rendering task:\", error, task);\n                      return null;\n                    }\n                  })}\n                  \n                  {/* Time range information (can be removed in production) */}\n                  <div className=\"time-range-info\">\n                    <small>\n                      {formatTime(startMinutes)} - {formatTime(endMinutes)}\n                    </small>\n                  </div>\n                </div>\n              </div>\n            </div>\n          )}\n          \n          {/* Mobile Timeline View */}\n          {Platform.OS !== 'web' && (\n            <ScrollView style={styles.mobileTimeline}>\n              <View style={[styles.timelineContent, { height: timelineHeight }]}>\n                {/* Hour markers for mobile */}\n                <View style={styles.hourMarkersContainer}>\n                  {hourMarkers.map((marker, i) => (\n                    <View \n                      key={i} \n                      style={[\n                        styles.hourMarker,\n                        { top: marker.position }\n                      ]}\n                    >\n                      <Text style={styles.hourLabel}>{marker.label}</Text>\n                      <View style={styles.hourLine} />\n                    </View>\n                  ))}\n                </View>\n                \n                {/* Task blocks for mobile */}\n                <View style={styles.taskBlocksContainer}>\n                  {sortedTasks.map((task, index) => {\n                    if (!task || !task.startTime || !task.duration) {\n                      return null; // Skip invalid tasks\n                    }\n                    \n                    try {\n                      const taskStartMinutes = convertTimeToMinutes(task.startTime);\n                      const topPosition = getVerticalPosition(taskStartMinutes, startMinutes);\n                      const duration = parseInt(task.duration, 10) || 30;\n                      const height = getDurationHeight(duration);\n                      \n                      return (\n                        <View\n                          key={index}\n                          style={[\n                            styles.taskBlock,\n                            {\n                              position: 'absolute',\n                              top: topPosition,\n                              height: height,\n                              left: 0,\n                              right: 0,\n                              backgroundColor: task.color || COLORS.primary\n                            }\n                          ]}\n                        >\n                          {/* Make sure to always render task name */}\n                          <Text style={styles.taskTitle} numberOfLines={1}>\n                            {task.name || 'Untitled Task'}\n                          </Text>\n                          <Text style={styles.taskDuration}>\n                            {task.startTime} • {task.duration || 0} min\n                          </Text>\n                        </View>\n                      );\n                    } catch (error) {\n                      console.error(\"Error rendering mobile task:\", error, task);\n                      return null;\n                    }\n                  })}\n                </View>\n              </View>\n            </ScrollView>\n          )}\n        </>\n      )}\n    </View>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    backgroundColor: COLORS.cardBackground,\n    borderRadius: 12,\n    padding: 16,\n    marginVertical: 10,\n    shadowColor: COLORS.black,\n    shadowOffset: { width: 0, height: 2 },\n    shadowOpacity: 0.1,\n    shadowRadius: 4,\n    elevation: 3,\n    borderLeftWidth: 4,\n    borderLeftColor: COLORS.primary,\n  },\n  title: {\n    fontSize: 18,\n    fontWeight: 'bold',\n    marginBottom: 15,\n    color: COLORS.black,\n  },\n  emptyState: {\n    padding: 20,\n    alignItems: 'center',\n    justifyContent: 'center',\n    backgroundColor: COLORS.secondaryLight,\n    borderRadius: 8,\n    marginTop: 20,\n  },\n  emptyStateText: {\n    color: COLORS.secondaryDark,\n    textAlign: 'center',\n    fontStyle: 'italic',\n  },\n  \n  // Mobile-specific styles for vertical timeline\n  mobileTimeline: {\n    height: 500, // Fixed height with scroll\n    marginVertical: 10,\n  },\n  timelineContent: {\n    position: 'relative',\n    flexDirection: 'row',\n  },\n  hourMarkersContainer: {\n    width: 60,\n    position: 'absolute',\n    top: 0,\n    left: 0,\n    bottom: 0,\n    borderRightWidth: 1,\n    borderRightColor: COLORS.secondary,\n  },\n  hourMarker: {\n    position: 'absolute',\n    left: 0,\n    width: 60,\n    alignItems: 'flex-start',\n  },\n  hourLabel: {\n    fontSize: 10,\n    color: COLORS.secondaryDark,\n    marginLeft: 5,\n  },\n  hourLine: {\n    position: 'absolute',\n    left: 60,\n    right: -500, // Extend across timeline\n    height: 1,\n    backgroundColor: 'rgba(0,0,0,0.05)',\n  },\n  taskBlocksContainer: {\n    position: 'absolute',\n    top: 0,\n    left: 70, // Offset from hour markers\n    right: 10,\n    bottom: 0,\n  },\n  taskBlock: {\n    borderRadius: 4,\n    padding: 8,\n    justifyContent: 'center',\n  },\n  taskTitle: {\n    color: COLORS.white,\n    fontWeight: 'bold',\n    fontSize: 12,\n  },\n  taskDuration: {\n    color: COLORS.white,\n    fontSize: 10,\n    opacity: 0.9,\n    marginTop: 4,\n  },\n});\n\nexport default DailySchedule;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
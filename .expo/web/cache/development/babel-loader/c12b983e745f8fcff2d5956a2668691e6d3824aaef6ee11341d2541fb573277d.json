{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport COLORS from \"../../colors\";\nimport \"../../../src/styles/components/DailySchedule.css\";\nimport { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\nvar TOTAL_MINUTES_IN_DAY = 24 * 60;\nvar MINUTES_PER_PIXEL = 2;\nvar DEFAULT_MIN_TIMELINE_HEIGHT = 400;\nvar DailySchedule = function DailySchedule(_ref) {\n  var _ref$tasks = _ref.tasks,\n    tasks = _ref$tasks === void 0 ? [] : _ref$tasks;\n  var convertTimeToMinutes = function convertTimeToMinutes(timeString) {\n    if (!timeString) return 0;\n    try {\n      var parts = timeString.split(' ');\n      if (parts.length !== 2) return 0;\n      var _parts = _slicedToArray(parts, 2),\n        time = _parts[0],\n        period = _parts[1];\n      var timeParts = time.split(':');\n      if (timeParts.length !== 2) return 0;\n      var hours = parseInt(timeParts[0], 10);\n      var minutes = parseInt(timeParts[1], 10);\n      if (isNaN(hours) || isNaN(minutes)) return 0;\n      if (period === 'PM' && hours < 12) {\n        hours += 12;\n      } else if (period === 'AM' && hours === 12) {\n        hours = 0;\n      }\n      return hours * 60 + minutes;\n    } catch (error) {\n      console.error(\"Error parsing time:\", error);\n      return 0;\n    }\n  };\n  var getVerticalPosition = function getVerticalPosition(minutes, startMinutes) {\n    if (!minutes || isNaN(minutes)) return 0;\n    var relativeMinutes = minutes - startMinutes;\n    var position = relativeMinutes / MINUTES_PER_PIXEL;\n    return Math.max(position, 0);\n  };\n  var getDurationHeight = function getDurationHeight(durationMinutes) {\n    if (!durationMinutes || isNaN(durationMinutes)) return 30;\n    var height = durationMinutes / MINUTES_PER_PIXEL;\n    return Math.max(height, 30);\n  };\n  var formatTime = function formatTime(minutes) {\n    var hours = Math.floor(minutes / 60);\n    var mins = minutes % 60;\n    var period = hours >= 12 ? 'PM' : 'AM';\n    var displayHours = hours % 12 === 0 ? 12 : hours % 12;\n    return displayHours + \":\" + mins.toString().padStart(2, '0') + \" \" + period;\n  };\n  var renderHourMarkers = function renderHourMarkers() {\n    try {\n      var _markers = [];\n      var _hourGridLines = [];\n      for (var i = 0; i <= 24; i++) {\n        var minutes = i * 60;\n        var position = getVerticalPosition(minutes);\n        _markers.push(_jsx(\"div\", {\n          className: \"hour-marker\",\n          style: {\n            top: position + \"px\"\n          },\n          children: _jsx(\"span\", {\n            className: \"hour-label\",\n            children: i === 0 ? '12 AM' : i === 12 ? '12 PM' : i > 12 ? i - 12 + \" PM\" : i + \" AM\"\n          })\n        }, i));\n        _hourGridLines.push(_jsx(\"div\", {\n          className: \"hour-grid-line\",\n          style: {\n            top: position + \"px\"\n          }\n        }, \"grid-\" + i));\n      }\n      return {\n        markers: _markers,\n        hourGridLines: _hourGridLines\n      };\n    } catch (error) {\n      console.error(\"Error rendering hour markers:\", error);\n      return {\n        markers: [],\n        hourGridLines: []\n      };\n    }\n  };\n  var sortedTasks = React.useMemo(function () {\n    try {\n      return _toConsumableArray(tasks).filter(function (task) {\n        return task && task.startTime;\n      }).sort(function (a, b) {\n        return convertTimeToMinutes(a.startTime) - convertTimeToMinutes(b.startTime);\n      });\n    } catch (error) {\n      console.error(\"Error sorting tasks:\", error);\n      return [];\n    }\n  }, [tasks]);\n  var calculateTimeRange = React.useMemo(function () {\n    if (!sortedTasks.length) {\n      return {\n        startMinutes: 0,\n        endMinutes: 0,\n        rangeInMinutes: 0,\n        timelineHeight: 0,\n        hourMarkers: []\n      };\n    }\n    try {\n      var earliestTask = sortedTasks[0];\n      var startMinutes = convertTimeToMinutes(earliestTask.startTime);\n      startMinutes = Math.floor(startMinutes / 60) * 60;\n      var latestEndMinutes = 0;\n      sortedTasks.forEach(function (task) {\n        var taskStartMinutes = convertTimeToMinutes(task.startTime);\n        var taskEndMinutes = taskStartMinutes + (parseInt(task.duration, 10) || 0);\n        latestEndMinutes = Math.max(latestEndMinutes, taskEndMinutes);\n      });\n      latestEndMinutes = Math.ceil(latestEndMinutes / 60) * 60 + 60;\n      var minRangeMinutes = 4 * 60;\n      var rangeInMinutes = Math.max(latestEndMinutes - startMinutes, minRangeMinutes);\n      var timelineHeight = Math.max(rangeInMinutes / MINUTES_PER_PIXEL, DEFAULT_MIN_TIMELINE_HEIGHT);\n      var hourMarkers = [];\n      var startHour = Math.floor(startMinutes / 60);\n      var endHour = Math.ceil(latestEndMinutes / 60);\n      for (var hour = startHour; hour <= endHour; hour++) {\n        var hourInMinutes = hour * 60;\n        var relativePosition = hourInMinutes - startMinutes;\n        var position = relativePosition / MINUTES_PER_PIXEL;\n        if (position >= 0) {\n          hourMarkers.push({\n            hour: hour,\n            position: position,\n            label: hour === 0 || hour === 24 ? '12:00 AM' : hour === 12 ? '12:00 PM' : hour > 12 ? hour - 12 + \":00 PM\" : hour + \":00 AM\"\n          });\n        }\n      }\n      return {\n        startMinutes: startMinutes,\n        endMinutes: latestEndMinutes,\n        rangeInMinutes: rangeInMinutes,\n        timelineHeight: timelineHeight,\n        hourMarkers: hourMarkers\n      };\n    } catch (error) {\n      console.error(\"Error calculating time range:\", error);\n      return {\n        startMinutes: 0,\n        endMinutes: 0,\n        rangeInMinutes: 0,\n        timelineHeight: 0,\n        hourMarkers: []\n      };\n    }\n  }, [sortedTasks]);\n  return _jsxs(View, {\n    style: styles.container,\n    children: [_jsx(Text, {\n      style: styles.title,\n      children: \"Daily Schedule\"\n    }), Platform.OS === 'web' && _jsx(\"div\", {\n      className: \"daily-schedule-container\",\n      children: _jsxs(\"div\", {\n        className: \"timeline-container\",\n        children: [_jsx(\"div\", {\n          className: \"hour-markers\",\n          children: markers\n        }), _jsxs(\"div\", {\n          className: \"timeline\",\n          children: [hourGridLines, sortedTasks.length > 0 ? sortedTasks.map(function (task, index) {\n            if (!task || !task.startTime || !task.duration) {\n              return null;\n            }\n            try {\n              var startMinutes = convertTimeToMinutes(task.startTime);\n              var topPosition = getVerticalPosition(startMinutes);\n              var height = getDurationHeight(parseInt(task.duration, 10) || 30);\n              return _jsxs(\"div\", {\n                className: \"task-block\",\n                style: {\n                  top: topPosition + \"px\",\n                  height: height + \"px\",\n                  backgroundColor: task.color || COLORS.primary\n                },\n                children: [_jsx(\"div\", {\n                  className: \"task-title\",\n                  children: task.name || 'Untitled Task'\n                }), _jsxs(\"div\", {\n                  className: \"task-details\",\n                  children: [task.startTime, \" \\u2022 \", task.duration || 0, \" min\"]\n                })]\n              }, index);\n            } catch (error) {\n              console.error(\"Error rendering task:\", error, task);\n              return null;\n            }\n          }) : _jsx(\"div\", {\n            className: \"empty-timeline\",\n            children: \"No tasks scheduled for today. Add tasks to see your daily schedule.\"\n          })]\n        })]\n      })\n    }), Platform.OS !== 'web' && _jsx(ScrollView, {\n      style: styles.mobileTimeline,\n      children: _jsxs(View, {\n        style: [styles.timelineContent, {\n          height: TIMELINE_HEIGHT\n        }],\n        children: [_jsx(View, {\n          style: styles.hourMarkersContainer,\n          children: Array.from({\n            length: 25\n          }).map(function (_, i) {\n            var minutes = i * 60;\n            var position = minutes / MINUTES_PER_PIXEL;\n            return _jsxs(View, {\n              style: [styles.hourMarker, {\n                top: position\n              }],\n              children: [_jsx(Text, {\n                style: styles.hourLabel,\n                children: i === 0 ? '12 AM' : i === 12 ? '12 PM' : i > 12 ? i - 12 + \" PM\" : i + \" AM\"\n              }), _jsx(View, {\n                style: styles.hourLine\n              })]\n            }, i);\n          })\n        }), _jsx(View, {\n          style: styles.taskBlocksContainer,\n          children: sortedTasks.length > 0 ? sortedTasks.map(function (task, index) {\n            if (!task || !task.startTime || !task.duration) {\n              return null;\n            }\n            try {\n              var startMinutes = convertTimeToMinutes(task.startTime);\n              var topPosition = startMinutes / MINUTES_PER_PIXEL;\n              var duration = parseInt(task.duration, 10) || 30;\n              var height = Math.max(duration / MINUTES_PER_PIXEL, 30);\n              return _jsxs(View, {\n                style: [styles.taskBlock, {\n                  position: 'absolute',\n                  top: topPosition,\n                  height: height,\n                  left: 0,\n                  right: 0,\n                  backgroundColor: task.color || COLORS.primary\n                }],\n                children: [_jsx(Text, {\n                  style: styles.taskTitle,\n                  numberOfLines: 1,\n                  children: task.name || 'Untitled Task'\n                }), _jsxs(Text, {\n                  style: styles.taskDuration,\n                  children: [task.startTime, \" \\u2022 \", task.duration || 0, \" min\"]\n                })]\n              }, index);\n            } catch (error) {\n              console.error(\"Error rendering mobile task:\", error, task);\n              return null;\n            }\n          }) : _jsx(View, {\n            style: styles.emptyState,\n            children: _jsx(Text, {\n              style: styles.emptyStateText,\n              children: \"No tasks scheduled for today. Add tasks to see your daily schedule.\"\n            })\n          })\n        })]\n      })\n    })]\n  });\n};\nvar styles = StyleSheet.create({\n  container: {\n    backgroundColor: COLORS.cardBackground,\n    borderRadius: 12,\n    padding: 16,\n    marginVertical: 10,\n    shadowColor: COLORS.black,\n    shadowOffset: {\n      width: 0,\n      height: 2\n    },\n    shadowOpacity: 0.1,\n    shadowRadius: 4,\n    elevation: 3,\n    borderLeftWidth: 4,\n    borderLeftColor: COLORS.primary\n  },\n  title: {\n    fontSize: 18,\n    fontWeight: 'bold',\n    marginBottom: 15,\n    color: COLORS.black\n  },\n  emptyState: {\n    padding: 20,\n    alignItems: 'center',\n    justifyContent: 'center',\n    backgroundColor: COLORS.secondaryLight,\n    borderRadius: 8,\n    marginTop: 20\n  },\n  emptyStateText: {\n    color: COLORS.secondaryDark,\n    textAlign: 'center',\n    fontStyle: 'italic'\n  },\n  mobileTimeline: {\n    height: 500,\n    marginVertical: 10\n  },\n  timelineContent: {\n    position: 'relative',\n    flexDirection: 'row'\n  },\n  hourMarkersContainer: {\n    width: 60,\n    position: 'absolute',\n    top: 0,\n    left: 0,\n    bottom: 0,\n    borderRightWidth: 1,\n    borderRightColor: COLORS.secondary\n  },\n  hourMarker: {\n    position: 'absolute',\n    left: 0,\n    width: 60,\n    alignItems: 'flex-start'\n  },\n  hourLabel: {\n    fontSize: 10,\n    color: COLORS.secondaryDark,\n    marginLeft: 5\n  },\n  hourLine: {\n    position: 'absolute',\n    left: 60,\n    right: -500,\n    height: 1,\n    backgroundColor: 'rgba(0,0,0,0.05)'\n  },\n  taskBlocksContainer: {\n    position: 'absolute',\n    top: 0,\n    left: 70,\n    right: 10,\n    bottom: 0\n  },\n  taskBlock: {\n    borderRadius: 4,\n    padding: 8,\n    justifyContent: 'center'\n  },\n  taskTitle: {\n    color: COLORS.white,\n    fontWeight: 'bold',\n    fontSize: 12\n  },\n  taskDuration: {\n    color: COLORS.white,\n    fontSize: 10,\n    opacity: 0.9,\n    marginTop: 4\n  }\n});\nexport default DailySchedule;","map":{"version":3,"names":["React","View","Text","StyleSheet","ScrollView","Platform","COLORS","jsx","_jsx","jsxs","_jsxs","TOTAL_MINUTES_IN_DAY","MINUTES_PER_PIXEL","DEFAULT_MIN_TIMELINE_HEIGHT","DailySchedule","_ref","_ref$tasks","tasks","convertTimeToMinutes","timeString","parts","split","length","_parts","_slicedToArray","time","period","timeParts","hours","parseInt","minutes","isNaN","error","console","getVerticalPosition","startMinutes","relativeMinutes","position","Math","max","getDurationHeight","durationMinutes","height","formatTime","floor","mins","displayHours","toString","padStart","renderHourMarkers","markers","hourGridLines","i","push","className","style","top","children","sortedTasks","useMemo","_toConsumableArray","filter","task","startTime","sort","a","b","calculateTimeRange","endMinutes","rangeInMinutes","timelineHeight","hourMarkers","earliestTask","latestEndMinutes","forEach","taskStartMinutes","taskEndMinutes","duration","ceil","minRangeMinutes","startHour","endHour","hour","hourInMinutes","relativePosition","label","styles","container","title","OS","map","index","topPosition","backgroundColor","color","primary","name","mobileTimeline","timelineContent","TIMELINE_HEIGHT","hourMarkersContainer","Array","from","_","hourMarker","hourLabel","hourLine","taskBlocksContainer","taskBlock","left","right","taskTitle","numberOfLines","taskDuration","emptyState","emptyStateText","create","cardBackground","borderRadius","padding","marginVertical","shadowColor","black","shadowOffset","width","shadowOpacity","shadowRadius","elevation","borderLeftWidth","borderLeftColor","fontSize","fontWeight","marginBottom","alignItems","justifyContent","secondaryLight","marginTop","secondaryDark","textAlign","fontStyle","flexDirection","bottom","borderRightWidth","borderRightColor","secondary","marginLeft","white","opacity"],"sources":["C:/Users/Seho/Desktop/Seho/Personal Projects/Claude/scheduler_app/src/components/DailySchedule/DailySchedule.js"],"sourcesContent":["import React from 'react';\nimport { View, Text, StyleSheet, ScrollView, Platform } from 'react-native';\nimport COLORS from '../../colors';\nimport '../../../src/styles/components/DailySchedule.css';\n\n// Constants for timeline calculations - defined outside component for StyleSheet access\nconst TOTAL_MINUTES_IN_DAY = 24 * 60; // 24 hours = 1440 minutes\nconst MINUTES_PER_PIXEL = 2; // 1 minute = 2 pixels height (as requested)\nconst DEFAULT_MIN_TIMELINE_HEIGHT = 400; // Minimum height when tasks exist\n\nconst DailySchedule = ({ tasks = [] }) => {\n  \n  /**\n   * Converts a time string (e.g., \"12:00 AM\") to minutes since midnight\n   * @param {string} timeString - Time in format \"HH:MM AM/PM\"\n   * @return {number} Minutes since midnight\n   */\n  const convertTimeToMinutes = (timeString) => {\n    if (!timeString) return 0;\n    \n    try {\n      // Parse the time string\n      const parts = timeString.split(' ');\n      if (parts.length !== 2) return 0;\n      \n      const [time, period] = parts;\n      const timeParts = time.split(':');\n      if (timeParts.length !== 2) return 0;\n      \n      let hours = parseInt(timeParts[0], 10);\n      let minutes = parseInt(timeParts[1], 10);\n      \n      if (isNaN(hours) || isNaN(minutes)) return 0;\n      \n      // Convert to 24-hour format\n      if (period === 'PM' && hours < 12) {\n        hours += 12;\n      } else if (period === 'AM' && hours === 12) {\n        hours = 0;\n      }\n      \n      // Calculate total minutes since midnight\n      return hours * 60 + minutes;\n    } catch (error) {\n      console.error(\"Error parsing time:\", error);\n      return 0;\n    }\n  };\n  \n  /**\n   * Converts minutes since midnight to a vertical position in pixels\n   * relative to the dynamic range's start time\n   * @param {number} minutes - Minutes since midnight\n   * @param {number} startMinutes - Start minutes of the range\n   * @return {number} Vertical position in pixels\n   */\n  const getVerticalPosition = (minutes, startMinutes) => {\n    if (!minutes || isNaN(minutes)) return 0;\n    \n    // Calculate position relative to the range start\n    const relativeMinutes = minutes - startMinutes;\n    \n    // Convert minutes to pixels (default is MINUTES_PER_PIXEL)\n    const position = relativeMinutes / MINUTES_PER_PIXEL;\n    \n    // Ensure position is not negative (shouldn't happen with our range calculation)\n    return Math.max(position, 0);\n  };\n  \n  /**\n   * Converts duration in minutes to height in pixels\n   * @param {number} durationMinutes - Duration in minutes\n   * @return {number} Height in pixels\n   */\n  const getDurationHeight = (durationMinutes) => {\n    if (!durationMinutes || isNaN(durationMinutes)) return 30; // Default minimum height\n    \n    // Convert duration to height using our pixel ratio\n    const height = durationMinutes / MINUTES_PER_PIXEL;\n    \n    // Ensure height is reasonable (minimum 30px for visibility)\n    return Math.max(height, 30);\n  };\n  \n  /**\n   * Formats time for display (e.g., 9:30 AM)\n   * @param {number} minutes - Minutes since midnight\n   * @return {string} Formatted time string\n   */\n  const formatTime = (minutes) => {\n    const hours = Math.floor(minutes / 60);\n    const mins = minutes % 60;\n    \n    // Convert to 12-hour format\n    const period = hours >= 12 ? 'PM' : 'AM';\n    const displayHours = hours % 12 === 0 ? 12 : hours % 12;\n    \n    return `${displayHours}:${mins.toString().padStart(2, '0')} ${period}`;\n  };\n  \n  /**\n   * Generates hour markers for the vertical timeline\n   * @return {Array} JSX elements for hour markers\n   */\n  const renderHourMarkers = () => {\n    try {\n      const markers = [];\n      const hourGridLines = [];\n      \n      // Create markers for each hour (0-24)\n      for (let i = 0; i <= 24; i++) {\n        const minutes = i * 60; // Convert hour to minutes\n        const position = getVerticalPosition(minutes);\n        \n        // Create hour marker with label\n        markers.push(\n          <div \n            key={i} \n            className=\"hour-marker\"\n            style={{ top: `${position}px` }}\n          >\n            <span className=\"hour-label\">\n              {i === 0 ? '12 AM' : i === 12 ? '12 PM' : i > 12 ? `${i-12} PM` : `${i} AM`}\n            </span>\n          </div>\n        );\n        \n        // Create grid line for this hour\n        hourGridLines.push(\n          <div\n            key={`grid-${i}`}\n            className=\"hour-grid-line\"\n            style={{ top: `${position}px` }}\n          />\n        );\n      }\n      \n      return { markers, hourGridLines };\n    } catch (error) {\n      console.error(\"Error rendering hour markers:\", error);\n      return { markers: [], hourGridLines: [] };\n    }\n  };\n  \n  // Sort tasks by start time with error handling\n  const sortedTasks = React.useMemo(() => {\n    try {\n      return [...tasks].filter(task => task && task.startTime).sort((a, b) => {\n        return convertTimeToMinutes(a.startTime) - convertTimeToMinutes(b.startTime);\n      });\n    } catch (error) {\n      console.error(\"Error sorting tasks:\", error);\n      return [];\n    }\n  }, [tasks]);\n  \n  /**\n   * Calculate the dynamic time range for the schedule\n   * Returns: { startMinutes, endMinutes, rangeInMinutes, timelineHeight, hourMarkers }\n   */\n  const calculateTimeRange = React.useMemo(() => {\n    // If no tasks, don't calculate a range\n    if (!sortedTasks.length) {\n      return {\n        startMinutes: 0,\n        endMinutes: 0,\n        rangeInMinutes: 0,\n        timelineHeight: 0,\n        hourMarkers: []\n      };\n    }\n    \n    try {\n      // Find earliest start time\n      const earliestTask = sortedTasks[0]; // Tasks are already sorted by start time\n      let startMinutes = convertTimeToMinutes(earliestTask.startTime);\n      \n      // Round down to the nearest hour for cleaner display\n      startMinutes = Math.floor(startMinutes / 60) * 60;\n      \n      // Find latest end time (start time + duration)\n      let latestEndMinutes = 0;\n      sortedTasks.forEach(task => {\n        const taskStartMinutes = convertTimeToMinutes(task.startTime);\n        const taskEndMinutes = taskStartMinutes + (parseInt(task.duration, 10) || 0);\n        latestEndMinutes = Math.max(latestEndMinutes, taskEndMinutes);\n      });\n      \n      // Round up to the nearest hour for cleaner display and add 1 hour of padding\n      latestEndMinutes = Math.ceil(latestEndMinutes / 60) * 60 + 60;\n      \n      // Ensure a minimum range of 4 hours for visibility\n      const minRangeMinutes = 4 * 60;\n      const rangeInMinutes = Math.max(latestEndMinutes - startMinutes, minRangeMinutes);\n      \n      // Calculate timeline height based on range (1 minute = MINUTES_PER_PIXEL pixels)\n      const timelineHeight = Math.max(\n        rangeInMinutes / MINUTES_PER_PIXEL,\n        DEFAULT_MIN_TIMELINE_HEIGHT\n      );\n      \n      // Calculate hour markers within our range\n      const hourMarkers = [];\n      const startHour = Math.floor(startMinutes / 60);\n      const endHour = Math.ceil(latestEndMinutes / 60);\n      \n      for (let hour = startHour; hour <= endHour; hour++) {\n        const hourInMinutes = hour * 60;\n        const relativePosition = hourInMinutes - startMinutes; // Position relative to our start\n        const position = relativePosition / MINUTES_PER_PIXEL;\n        \n        if (position >= 0) { // Only include hours within our range\n          hourMarkers.push({\n            hour,\n            position, \n            label: hour === 0 || hour === 24 ? '12:00 AM' : \n                   hour === 12 ? '12:00 PM' : \n                   hour > 12 ? `${hour-12}:00 PM` : \n                   `${hour}:00 AM`\n          });\n        }\n      }\n      \n      return {\n        startMinutes,\n        endMinutes: latestEndMinutes,\n        rangeInMinutes,\n        timelineHeight,\n        hourMarkers\n      };\n    } catch (error) {\n      console.error(\"Error calculating time range:\", error);\n      return {\n        startMinutes: 0,\n        endMinutes: 0,\n        rangeInMinutes: 0,\n        timelineHeight: 0,\n        hourMarkers: []\n      };\n    }\n  }, [sortedTasks]);\n  \n  return (\n    <View style={styles.container}>\n      <Text style={styles.title}>Daily Schedule</Text>\n      \n      {/* Vertical Timeline View */}\n      {Platform.OS === 'web' && (\n        <div className=\"daily-schedule-container\">\n          <div className=\"timeline-container\">\n            {/* Hour markers column */}\n            <div className=\"hour-markers\">\n              {markers}\n            </div>\n            \n            {/* Timeline with tasks */}\n            <div className=\"timeline\">\n              {/* Hour grid lines */}\n              {hourGridLines}\n              \n              {/* Task blocks */}\n              {sortedTasks.length > 0 ? (\n                sortedTasks.map((task, index) => {\n                  if (!task || !task.startTime || !task.duration) {\n                    return null; // Skip invalid tasks\n                  }\n                  \n                  try {\n                    // Calculate position and height based on start time and duration\n                    const startMinutes = convertTimeToMinutes(task.startTime);\n                    const topPosition = getVerticalPosition(startMinutes);\n                    const height = getDurationHeight(parseInt(task.duration, 10) || 30);\n                    \n                    return (\n                      <div\n                        key={index}\n                        className=\"task-block\"\n                        style={{\n                          top: `${topPosition}px`,\n                          height: `${height}px`,\n                          backgroundColor: task.color || COLORS.primary,\n                        }}\n                      >\n                        <div className=\"task-title\">{task.name || 'Untitled Task'}</div>\n                        <div className=\"task-details\">\n                          {task.startTime} • {task.duration || 0} min\n                        </div>\n                      </div>\n                    );\n                  } catch (error) {\n                    console.error(\"Error rendering task:\", error, task);\n                    return null;\n                  }\n                })\n              ) : (\n                <div className=\"empty-timeline\">\n                  No tasks scheduled for today. Add tasks to see your daily schedule.\n                </div>\n              )}\n            </div>\n          </div>\n        </div>\n      )}\n      \n      {/* Mobile Timeline View */}\n      {Platform.OS !== 'web' && (\n        <ScrollView style={styles.mobileTimeline}>\n          <View style={[styles.timelineContent, { height: TIMELINE_HEIGHT }]}>\n            {/* Hour markers for mobile */}\n            <View style={styles.hourMarkersContainer}>\n              {Array.from({ length: 25 }).map((_, i) => {\n                const minutes = i * 60;\n                const position = minutes / MINUTES_PER_PIXEL;\n                \n                return (\n                  <View \n                    key={i} \n                    style={[\n                      styles.hourMarker,\n                      { top: position }\n                    ]}\n                  >\n                    <Text style={styles.hourLabel}>\n                      {i === 0 ? '12 AM' : i === 12 ? '12 PM' : i > 12 ? `${i-12} PM` : `${i} AM`}\n                    </Text>\n                    <View style={styles.hourLine} />\n                  </View>\n                );\n              })}\n            </View>\n            \n            {/* Task blocks for mobile */}\n            <View style={styles.taskBlocksContainer}>\n              {sortedTasks.length > 0 ? (\n                sortedTasks.map((task, index) => {\n                  if (!task || !task.startTime || !task.duration) {\n                    return null; // Skip invalid tasks\n                  }\n                  \n                  try {\n                    const startMinutes = convertTimeToMinutes(task.startTime);\n                    const topPosition = startMinutes / MINUTES_PER_PIXEL;\n                    const duration = parseInt(task.duration, 10) || 30;\n                    const height = Math.max(duration / MINUTES_PER_PIXEL, 30); // Minimum height 30px\n                    \n                    return (\n                      <View\n                        key={index}\n                        style={[\n                          styles.taskBlock,\n                          {\n                            position: 'absolute',\n                            top: topPosition,\n                            height: height,\n                            left: 0,\n                            right: 0,\n                            backgroundColor: task.color || COLORS.primary\n                          }\n                        ]}\n                      >\n                        <Text style={styles.taskTitle} numberOfLines={1}>\n                          {task.name || 'Untitled Task'}\n                        </Text>\n                        <Text style={styles.taskDuration}>\n                          {task.startTime} • {task.duration || 0} min\n                        </Text>\n                      </View>\n                    );\n                  } catch (error) {\n                    console.error(\"Error rendering mobile task:\", error, task);\n                    return null;\n                  }\n                })\n              ) : (\n                <View style={styles.emptyState}>\n                  <Text style={styles.emptyStateText}>\n                    No tasks scheduled for today. Add tasks to see your daily schedule.\n                  </Text>\n                </View>\n              )}\n            </View>\n          </View>\n        </ScrollView>\n      )}\n    </View>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    backgroundColor: COLORS.cardBackground,\n    borderRadius: 12,\n    padding: 16,\n    marginVertical: 10,\n    shadowColor: COLORS.black,\n    shadowOffset: { width: 0, height: 2 },\n    shadowOpacity: 0.1,\n    shadowRadius: 4,\n    elevation: 3,\n    borderLeftWidth: 4,\n    borderLeftColor: COLORS.primary,\n  },\n  title: {\n    fontSize: 18,\n    fontWeight: 'bold',\n    marginBottom: 15,\n    color: COLORS.black,\n  },\n  emptyState: {\n    padding: 20,\n    alignItems: 'center',\n    justifyContent: 'center',\n    backgroundColor: COLORS.secondaryLight,\n    borderRadius: 8,\n    marginTop: 20,\n  },\n  emptyStateText: {\n    color: COLORS.secondaryDark,\n    textAlign: 'center',\n    fontStyle: 'italic',\n  },\n  \n  // Mobile-specific styles for vertical timeline\n  mobileTimeline: {\n    height: 500, // Fixed height with scroll\n    marginVertical: 10,\n  },\n  timelineContent: {\n    position: 'relative',\n    flexDirection: 'row',\n  },\n  hourMarkersContainer: {\n    width: 60,\n    position: 'absolute',\n    top: 0,\n    left: 0,\n    bottom: 0,\n    borderRightWidth: 1,\n    borderRightColor: COLORS.secondary,\n  },\n  hourMarker: {\n    position: 'absolute',\n    left: 0,\n    width: 60,\n    alignItems: 'flex-start',\n  },\n  hourLabel: {\n    fontSize: 10,\n    color: COLORS.secondaryDark,\n    marginLeft: 5,\n  },\n  hourLine: {\n    position: 'absolute',\n    left: 60,\n    right: -500, // Extend across timeline\n    height: 1,\n    backgroundColor: 'rgba(0,0,0,0.05)',\n  },\n  taskBlocksContainer: {\n    position: 'absolute',\n    top: 0,\n    left: 70, // Offset from hour markers\n    right: 10,\n    bottom: 0,\n  },\n  taskBlock: {\n    borderRadius: 4,\n    padding: 8,\n    justifyContent: 'center',\n  },\n  taskTitle: {\n    color: COLORS.white,\n    fontWeight: 'bold',\n    fontSize: 12,\n  },\n  taskDuration: {\n    color: COLORS.white,\n    fontSize: 10,\n    opacity: 0.9,\n    marginTop: 4,\n  },\n});\n\nexport default DailySchedule;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
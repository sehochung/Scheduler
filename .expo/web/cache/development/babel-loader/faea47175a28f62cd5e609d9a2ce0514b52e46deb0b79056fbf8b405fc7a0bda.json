{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { useState } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport SafeAreaView from \"react-native-web/dist/exports/SafeAreaView\";\nimport StatusBar from \"react-native-web/dist/exports/StatusBar\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport COLORS from \"./src/colors\";\nimport Schedule from \"./src/components/Schedule\";\nimport TaskInput from \"./src/components/TaskInput\";\nimport SuggestionPanel from \"./src/components/SuggestionPanel\";\nimport MoodTracker from \"./src/components/MoodTracker\";\nimport ScheduleSharing from \"./src/components/ScheduleSharing\";\nimport DailyAnalysis from \"./src/components/DailyAnalysis\";\nimport { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\nexport default function App() {\n  var _useState = useState([]),\n    _useState2 = _slicedToArray(_useState, 2),\n    tasks = _useState2[0],\n    setTasks = _useState2[1];\n  var _useState3 = useState({}),\n    _useState4 = _slicedToArray(_useState3, 2),\n    dailyMood = _useState4[0],\n    setDailyMood = _useState4[1];\n  var _useState5 = useState(null),\n    _useState6 = _slicedToArray(_useState5, 2),\n    analysis = _useState6[0],\n    setAnalysis = _useState6[1];\n  var addTask = function addTask(newTask) {\n    setTasks([].concat(_toConsumableArray(tasks), [newTask]));\n  };\n  var analyzeDailyPerformance = function analyzeDailyPerformance() {\n    var workCount = 0;\n    var leisureCount = 0;\n    var grindCount = 0;\n    tasks.forEach(function (task) {\n      if (task.tags && task.tags.includes('work')) workCount++;\n      if (task.tags && task.tags.includes('leisure')) leisureCount++;\n      if (task.tags && task.tags.includes('grind')) grindCount++;\n    });\n    var scheduleCategory = 'balanced';\n    if (workCount > leisureCount && workCount > grindCount) {\n      scheduleCategory = 'work-focused';\n    } else if (leisureCount > workCount && leisureCount > grindCount) {\n      scheduleCategory = 'leisure-focused';\n    } else if (grindCount > workCount && grindCount > leisureCount) {\n      scheduleCategory = 'grind-focused';\n    }\n    setAnalysis({\n      productivityScore: 85,\n      moodTrends: 'Positive after exercise tasks',\n      suggestions: ['Schedule more morning exercise', 'Take breaks between long tasks'],\n      scheduleCategory: scheduleCategory\n    });\n  };\n  return _jsxs(SafeAreaView, {\n    style: styles.container,\n    children: [_jsx(StatusBar, {\n      barStyle: \"dark-content\"\n    }), _jsxs(ScrollView, {\n      style: styles.scrollView,\n      contentContainerStyle: styles.scrollContent,\n      children: [_jsx(Text, {\n        style: styles.appTitle,\n        children: \"Schedule Bot\"\n      }), _jsx(Schedule, {\n        tasks: tasks\n      }), _jsx(TaskInput, {\n        onAddTask: addTask\n      }), _jsx(SuggestionPanel, {\n        tasks: tasks\n      }), _jsx(MoodTracker, {\n        onMoodUpdate: setDailyMood\n      }), _jsx(ScheduleSharing, {\n        schedule: tasks\n      }), _jsx(DailyAnalysis, {\n        analysis: analysis,\n        onAnalyze: analyzeDailyPerformance\n      }), _jsx(View, {\n        style: styles.footer,\n        children: _jsx(Text, {\n          style: styles.footerText,\n          children: \"Schedule better, live smarter\"\n        })\n      })]\n    })]\n  });\n}\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: COLORS.background\n  },\n  scrollView: {\n    flex: 1\n  },\n  scrollContent: {\n    padding: 16,\n    paddingTop: 40,\n    paddingBottom: 40\n  },\n  appTitle: {\n    fontSize: 28,\n    fontWeight: 'bold',\n    color: COLORS.primary,\n    marginBottom: 20,\n    textAlign: 'center'\n  },\n  footer: {\n    marginTop: 30,\n    alignItems: 'center'\n  },\n  footerText: {\n    fontSize: 14,\n    color: COLORS.secondaryDark,\n    fontStyle: 'italic'\n  }\n});","map":{"version":3,"names":["React","useState","View","Text","StyleSheet","SafeAreaView","StatusBar","ScrollView","COLORS","Schedule","TaskInput","SuggestionPanel","MoodTracker","ScheduleSharing","DailyAnalysis","jsx","_jsx","jsxs","_jsxs","App","_useState","_useState2","_slicedToArray","tasks","setTasks","_useState3","_useState4","dailyMood","setDailyMood","_useState5","_useState6","analysis","setAnalysis","addTask","newTask","concat","_toConsumableArray","analyzeDailyPerformance","workCount","leisureCount","grindCount","forEach","task","tags","includes","scheduleCategory","productivityScore","moodTrends","suggestions","style","styles","container","children","barStyle","scrollView","contentContainerStyle","scrollContent","appTitle","onAddTask","onMoodUpdate","schedule","onAnalyze","footer","footerText","create","flex","backgroundColor","background","padding","paddingTop","paddingBottom","fontSize","fontWeight","color","primary","marginBottom","textAlign","marginTop","alignItems","secondaryDark","fontStyle"],"sources":["C:/Users/Seho/Desktop/Seho/Personal Projects/Claude/scheduler_app/App.js"],"sourcesContent":["import React, { useState } from 'react';\nimport { \n  View, \n  Text, \n  StyleSheet, \n  SafeAreaView, \n  StatusBar,\n  ScrollView\n} from 'react-native';\n\n// Import color theme\nimport COLORS from './src/colors';\n\n// Import components one by one\nimport Schedule from './src/components/Schedule';\nimport TaskInput from './src/components/TaskInput';\nimport SuggestionPanel from './src/components/SuggestionPanel';\nimport MoodTracker from './src/components/MoodTracker';\nimport ScheduleSharing from './src/components/ScheduleSharing';\nimport DailyAnalysis from './src/components/DailyAnalysis';\n\nexport default function App() {\n  const [tasks, setTasks] = useState([]);\n  const [dailyMood, setDailyMood] = useState({});\n  const [analysis, setAnalysis] = useState(null);\n\n  const addTask = (newTask) => {\n    setTasks([...tasks, newTask]);\n  };\n\n  const analyzeDailyPerformance = () => {\n    // Generate insights based on completed tasks and mood data\n    \n    // Determine schedule category based on tasks\n    let workCount = 0;\n    let leisureCount = 0;\n    let grindCount = 0;\n    \n    tasks.forEach(task => {\n      if (task.tags && task.tags.includes('work')) workCount++;\n      if (task.tags && task.tags.includes('leisure')) leisureCount++;\n      if (task.tags && task.tags.includes('grind')) grindCount++;\n    });\n    \n    // Determine primary schedule category\n    let scheduleCategory = 'balanced';\n    if (workCount > leisureCount && workCount > grindCount) {\n      scheduleCategory = 'work-focused';\n    } else if (leisureCount > workCount && leisureCount > grindCount) {\n      scheduleCategory = 'leisure-focused';\n    } else if (grindCount > workCount && grindCount > leisureCount) {\n      scheduleCategory = 'grind-focused';\n    }\n    \n    setAnalysis({\n      productivityScore: 85,\n      moodTrends: 'Positive after exercise tasks',\n      suggestions: ['Schedule more morning exercise', 'Take breaks between long tasks'],\n      scheduleCategory: scheduleCategory\n    });\n  };\n\n  return (\n    <SafeAreaView style={styles.container}>\n      <StatusBar barStyle=\"dark-content\" />\n      <ScrollView \n        style={styles.scrollView}\n        contentContainerStyle={styles.scrollContent}\n      >\n        <Text style={styles.appTitle}>Schedule Bot</Text>\n        \n        <Schedule \n          tasks={tasks}\n        />\n        \n        <TaskInput \n          onAddTask={addTask}\n        />\n        \n        <SuggestionPanel \n          tasks={tasks}\n        />\n        \n        <MoodTracker \n          onMoodUpdate={setDailyMood} \n        />\n        \n        <ScheduleSharing \n          schedule={tasks} \n        />\n        \n        <DailyAnalysis \n          analysis={analysis} \n          onAnalyze={analyzeDailyPerformance}\n        />\n        \n        <View style={styles.footer}>\n          <Text style={styles.footerText}>\n            Schedule better, live smarter\n          </Text>\n        </View>\n      </ScrollView>\n    </SafeAreaView>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: COLORS.background,\n  },\n  scrollView: {\n    flex: 1,\n  },\n  scrollContent: {\n    padding: 16,\n    paddingTop: 40, // Add padding for status bar\n    paddingBottom: 40,\n  },\n  appTitle: {\n    fontSize: 28,\n    fontWeight: 'bold',\n    color: COLORS.primary,\n    marginBottom: 20,\n    textAlign: 'center',\n  },\n  footer: {\n    marginTop: 30,\n    alignItems: 'center',\n  },\n  footerText: {\n    fontSize: 14,\n    color: COLORS.secondaryDark,\n    fontStyle: 'italic',\n  }\n});"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
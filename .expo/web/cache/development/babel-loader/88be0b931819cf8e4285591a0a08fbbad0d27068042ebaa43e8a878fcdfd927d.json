{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport COLORS from \"../../colors\";\nimport \"../../../src/styles/components/DailySchedule.css\";\nimport { jsx as _jsx, jsxs as _jsxs, Fragment as _Fragment } from \"react/jsx-runtime\";\nvar TOTAL_MINUTES_IN_DAY = 24 * 60;\nvar PIXELS_PER_HOUR = 180;\nvar MINUTES_PER_HOUR = 60;\nvar DEFAULT_MIN_TIMELINE_HEIGHT = 1000;\nvar PADDING_HOURS = 2;\nvar DailySchedule = function DailySchedule(_ref) {\n  var _ref$tasks = _ref.tasks,\n    tasks = _ref$tasks === void 0 ? [] : _ref$tasks;\n  var convertTimeToMinutes = function convertTimeToMinutes(timeString) {\n    if (!timeString) return 0;\n    try {\n      var parts = timeString.split(' ');\n      if (parts.length !== 2) return 0;\n      var _parts = _slicedToArray(parts, 2),\n        time = _parts[0],\n        period = _parts[1];\n      var timeParts = time.split(':');\n      if (timeParts.length !== 2) return 0;\n      var hours = parseInt(timeParts[0], 10);\n      var minutes = parseInt(timeParts[1], 10);\n      if (isNaN(hours) || isNaN(minutes)) return 0;\n      if (period === 'PM' && hours < 12) {\n        hours += 12;\n      } else if (period === 'AM' && hours === 12) {\n        hours = 0;\n      }\n      return hours * 60 + minutes;\n    } catch (error) {\n      console.error(\"Error parsing time:\", error);\n      return 0;\n    }\n  };\n  var getVerticalPosition = function getVerticalPosition(minutes, startMinutes) {\n    if (!minutes || isNaN(minutes)) return 0;\n    var relativeMinutes = minutes - startMinutes;\n    var position = relativeMinutes / MINUTES_PER_HOUR * PIXELS_PER_HOUR;\n    return Math.max(Math.round(position), 0);\n  };\n  var getDurationHeight = function getDurationHeight(durationMinutes) {\n    if (!durationMinutes || isNaN(durationMinutes)) return 30;\n    var height = durationMinutes / MINUTES_PER_HOUR * PIXELS_PER_HOUR;\n    return Math.max(Math.round(height), 30);\n  };\n  var formatTime = function formatTime(minutes) {\n    var hours = Math.floor(minutes / 60);\n    var mins = minutes % 60;\n    var period = hours >= 12 ? 'PM' : 'AM';\n    var displayHours = hours % 12 === 0 ? 12 : hours % 12;\n    return displayHours + \":\" + mins.toString().padStart(2, '0') + \" \" + period;\n  };\n  var checkTaskOverlap = function checkTaskOverlap(newTask, existingTasks) {\n    if (!newTask || !newTask.startTime || !newTask.duration) {\n      return {\n        overlaps: false,\n        overlapsWith: null\n      };\n    }\n    var newTaskStart = convertTimeToMinutes(newTask.startTime);\n    var newTaskEnd = newTaskStart + (parseInt(newTask.duration, 10) || 0);\n    for (var task of existingTasks) {\n      if (!task || !task.startTime || !task.duration) continue;\n      var taskStart = convertTimeToMinutes(task.startTime);\n      var taskEnd = taskStart + (parseInt(task.duration, 10) || 0);\n      if (newTaskStart >= taskStart && newTaskStart < taskEnd || newTaskEnd > taskStart && newTaskEnd <= taskEnd || newTaskStart <= taskStart && newTaskEnd >= taskEnd) {\n        return {\n          overlaps: true,\n          overlapsWith: task\n        };\n      }\n    }\n    return {\n      overlaps: false,\n      overlapsWith: null\n    };\n  };\n  var sortedTasks = React.useMemo(function () {\n    try {\n      return _toConsumableArray(tasks).filter(function (task) {\n        return task && task.startTime;\n      }).sort(function (a, b) {\n        return convertTimeToMinutes(a.startTime) - convertTimeToMinutes(b.startTime);\n      });\n    } catch (error) {\n      console.error(\"Error sorting tasks:\", error);\n      return [];\n    }\n  }, [tasks]);\n  var timeRange = React.useMemo(function () {\n    if (!sortedTasks.length) {\n      return {\n        startMinutes: 0,\n        endMinutes: 0,\n        rangeInMinutes: 0,\n        timelineHeight: 0,\n        hourMarkers: []\n      };\n    }\n    try {\n      var earliestTask = sortedTasks[0];\n      var _startMinutes = convertTimeToMinutes(earliestTask.startTime);\n      _startMinutes = Math.floor(_startMinutes / 60) * 60;\n      _startMinutes = Math.max(0, _startMinutes - PADDING_HOURS * 60);\n      var latestEndMinutes = 0;\n      sortedTasks.forEach(function (task) {\n        var taskStartMinutes = convertTimeToMinutes(task.startTime);\n        var taskEndMinutes = taskStartMinutes + (parseInt(task.duration, 10) || 0);\n        latestEndMinutes = Math.max(latestEndMinutes, taskEndMinutes);\n      });\n      latestEndMinutes = Math.ceil(latestEndMinutes / 60) * 60 + PADDING_HOURS * 60;\n      latestEndMinutes = Math.min(latestEndMinutes, TOTAL_MINUTES_IN_DAY);\n      var minRangeMinutes = 4 * 60;\n      var _rangeInMinutes = Math.max(latestEndMinutes - _startMinutes, minRangeMinutes);\n      var _timelineHeight = Math.max(Math.round(_rangeInMinutes / 60 * PIXELS_PER_HOUR), DEFAULT_MIN_TIMELINE_HEIGHT);\n      var _hourMarkers = [];\n      var startHour = Math.floor(_startMinutes / 60);\n      var endHour = Math.ceil(latestEndMinutes / 60);\n      for (var hour = startHour; hour <= endHour; hour++) {\n        var hourInMinutes = hour * 60;\n        var relativePosition = hourInMinutes - _startMinutes;\n        var position = Math.round(relativePosition / 60 * PIXELS_PER_HOUR);\n        if (position >= 0) {\n          _hourMarkers.push({\n            hour: hour,\n            position: position,\n            isHalfHour: false,\n            label: hour === 0 || hour === 24 ? '12:00 AM' : hour === 12 ? '12:00 PM' : hour > 12 ? hour - 12 + \":00 PM\" : hour + \":00 AM\"\n          });\n          var halfHourInMinutes = hourInMinutes + 30;\n          var halfHourRelativePosition = halfHourInMinutes - _startMinutes;\n          var halfHourPosition = Math.round(halfHourRelativePosition / 60 * PIXELS_PER_HOUR);\n          if (halfHourPosition >= 0 && halfHourPosition <= _timelineHeight && hour < endHour) {\n            var displayHour = hour === 0 || hour === 24 ? 12 : hour > 12 ? hour - 12 : hour;\n            _hourMarkers.push({\n              hour: hour + 0.5,\n              position: halfHourPosition,\n              isHalfHour: true,\n              label: displayHour + \":30 \" + (hour >= 12 && hour < 24 ? 'PM' : 'AM')\n            });\n          }\n        }\n      }\n      return {\n        startMinutes: _startMinutes,\n        endMinutes: latestEndMinutes,\n        rangeInMinutes: _rangeInMinutes,\n        timelineHeight: _timelineHeight,\n        hourMarkers: _hourMarkers\n      };\n    } catch (error) {\n      console.error(\"Error calculating time range:\", error);\n      return {\n        startMinutes: 0,\n        endMinutes: 0,\n        rangeInMinutes: 0,\n        timelineHeight: 0,\n        hourMarkers: []\n      };\n    }\n  }, [sortedTasks]);\n  var startMinutes = timeRange.startMinutes,\n    endMinutes = timeRange.endMinutes,\n    rangeInMinutes = timeRange.rangeInMinutes,\n    timelineHeight = timeRange.timelineHeight,\n    hourMarkers = timeRange.hourMarkers;\n  React.useEffect(function () {\n    console.log(\"Rendered tasks:\", sortedTasks);\n  }, [sortedTasks]);\n  return _jsxs(View, {\n    style: styles.container,\n    children: [_jsx(Text, {\n      style: styles.title,\n      children: \"Daily Schedule\"\n    }), sortedTasks.length === 0 ? _jsx(View, {\n      style: styles.emptyState,\n      children: _jsx(Text, {\n        style: styles.emptyStateText,\n        children: \"No tasks scheduled for today. Add tasks to see your daily schedule.\"\n      })\n    }) : _jsxs(_Fragment, {\n      children: [Platform.OS === 'web' && _jsx(\"div\", {\n        className: \"daily-schedule-container\",\n        children: _jsxs(\"div\", {\n          className: \"timeline-container\",\n          children: [_jsx(\"div\", {\n            className: \"hour-markers\",\n            children: hourMarkers.map(function (marker, i) {\n              return _jsx(\"div\", {\n                className: \"hour-marker \" + (marker.isHalfHour ? 'half-hour-marker' : 'full-hour-marker'),\n                style: {\n                  top: marker.position + \"px\"\n                },\n                children: _jsx(\"span\", {\n                  className: \"hour-label \" + (marker.isHalfHour ? 'half-hour-label' : 'full-hour-label'),\n                  children: marker.label\n                })\n              }, i);\n            })\n          }), _jsxs(\"div\", {\n            className: \"timeline\",\n            style: {\n              height: timelineHeight + \"px\"\n            },\n            children: [hourMarkers.map(function (marker, i) {\n              return _jsx(\"div\", {\n                className: \"hour-grid-line \" + (marker.isHalfHour ? 'half-hour-grid-line' : 'full-hour-grid-line'),\n                style: {\n                  top: marker.position + \"px\"\n                }\n              }, \"grid-\" + i);\n            }), sortedTasks.map(function (task, index) {\n              if (!task || !task.startTime || !task.duration) {\n                console.log('Skipping invalid task:', task);\n                return null;\n              }\n              try {\n                var taskStartMinutes = convertTimeToMinutes(task.startTime);\n                var topPosition = getVerticalPosition(taskStartMinutes, startMinutes);\n                var height = getDurationHeight(parseInt(task.duration, 10) || 30);\n                console.log('Rendering task:', {\n                  index: index,\n                  id: task.id,\n                  name: task.name,\n                  title: task.title,\n                  startTime: task.startTime,\n                  duration: task.duration,\n                  topPosition: topPosition,\n                  height: height\n                });\n                var taskTitle = task.title || task.name || 'Untitled Task';\n                var taskStartTime = task.startTime || 'No time set';\n                var taskDuration = task.duration ? task.duration + \" min\" : 'No duration';\n                var isCompactView = height < 50;\n                return _jsx(\"div\", {\n                  className: \"task-block \" + (isCompactView ? 'task-block-compact' : ''),\n                  style: {\n                    top: topPosition + \"px\",\n                    height: height + \"px\",\n                    backgroundColor: task.color || COLORS.primary,\n                    zIndex: 10\n                  },\n                  children: isCompactView ? _jsxs(\"div\", {\n                    className: \"task-compact-content\",\n                    children: [taskTitle, \" \\u2022 \", taskStartTime, \" \\u2022 \", taskDuration]\n                  }) : _jsxs(_Fragment, {\n                    children: [_jsx(\"div\", {\n                      className: \"task-title\",\n                      children: taskTitle\n                    }), _jsxs(\"div\", {\n                      className: \"task-details\",\n                      children: [taskStartTime, \" \\u2022 \", taskDuration]\n                    })]\n                  })\n                }, task.id || index);\n              } catch (error) {\n                console.error(\"Error rendering task:\", error, task);\n                return null;\n              }\n            }), _jsx(\"div\", {\n              className: \"time-range-info\",\n              children: _jsxs(\"small\", {\n                children: [formatTime(startMinutes), \" - \", formatTime(endMinutes)]\n              })\n            })]\n          })]\n        })\n      }), Platform.OS !== 'web' && _jsx(ScrollView, {\n        style: styles.mobileTimeline,\n        children: _jsxs(View, {\n          style: [styles.timelineContent, {\n            height: timelineHeight\n          }],\n          children: [_jsx(View, {\n            style: styles.hourMarkersContainer,\n            children: hourMarkers.map(function (marker, i) {\n              return _jsxs(View, {\n                style: [styles.hourMarker, marker.isHalfHour ? styles.halfHourMarker : styles.fullHourMarker, {\n                  top: marker.position\n                }],\n                children: [_jsx(Text, {\n                  style: [styles.hourLabel, marker.isHalfHour ? styles.halfHourLabel : styles.fullHourLabel],\n                  children: marker.label\n                }), _jsx(View, {\n                  style: [styles.hourLine, marker.isHalfHour ? styles.halfHourLine : styles.fullHourLine]\n                })]\n              }, i);\n            })\n          }), _jsx(View, {\n            style: styles.taskBlocksContainer,\n            children: sortedTasks.map(function (task, index) {\n              if (!task || !task.startTime || !task.duration) {\n                return null;\n              }\n              try {\n                var taskStartMinutes = convertTimeToMinutes(task.startTime);\n                var topPosition = getVerticalPosition(taskStartMinutes, startMinutes);\n                var duration = parseInt(task.duration, 10) || 30;\n                var height = getDurationHeight(duration);\n                var taskTitle = task.title || task.name || 'Untitled Task';\n                var taskStartTime = task.startTime || 'No time set';\n                var taskDuration = task.duration ? task.duration + \" min\" : 'No duration';\n                var isCompactView = height < 50;\n                return _jsx(View, {\n                  style: [styles.taskBlock, {\n                    position: 'absolute',\n                    top: topPosition,\n                    height: height,\n                    left: 0,\n                    right: 0,\n                    backgroundColor: task.color || COLORS.primary,\n                    zIndex: 10,\n                    justifyContent: 'center'\n                  }],\n                  children: isCompactView ? _jsxs(Text, {\n                    style: styles.taskCompactText,\n                    numberOfLines: 1,\n                    ellipsizeMode: \"tail\",\n                    children: [taskTitle, \" \\u2022 \", taskStartTime, \" \\u2022 \", taskDuration]\n                  }) : _jsxs(_Fragment, {\n                    children: [_jsx(Text, {\n                      style: styles.taskTitle,\n                      numberOfLines: 1,\n                      children: taskTitle\n                    }), _jsxs(Text, {\n                      style: styles.taskDuration,\n                      children: [taskStartTime, \" \\u2022 \", taskDuration]\n                    })]\n                  })\n                }, task.id || index);\n              } catch (error) {\n                console.error(\"Error rendering mobile task:\", error, task);\n                return null;\n              }\n            })\n          })]\n        })\n      })]\n    })]\n  });\n};\nvar styles = StyleSheet.create({\n  container: {\n    backgroundColor: COLORS.cardBackground,\n    borderRadius: 12,\n    padding: 16,\n    marginVertical: 10,\n    shadowColor: COLORS.black,\n    shadowOffset: {\n      width: 0,\n      height: 2\n    },\n    shadowOpacity: 0.1,\n    shadowRadius: 4,\n    elevation: 3,\n    borderLeftWidth: 4,\n    borderLeftColor: COLORS.primary\n  },\n  title: {\n    fontSize: 18,\n    fontWeight: 'bold',\n    marginBottom: 15,\n    color: COLORS.black\n  },\n  emptyState: {\n    padding: 20,\n    alignItems: 'center',\n    justifyContent: 'center',\n    backgroundColor: COLORS.secondaryLight,\n    borderRadius: 8,\n    marginTop: 20\n  },\n  emptyStateText: {\n    color: COLORS.secondaryDark,\n    textAlign: 'center',\n    fontStyle: 'italic'\n  },\n  mobileTimeline: {\n    height: 1000,\n    marginVertical: 10\n  },\n  timelineContent: {\n    position: 'relative',\n    flexDirection: 'row'\n  },\n  hourMarkersContainer: {\n    width: 90,\n    position: 'absolute',\n    top: 0,\n    left: 0,\n    bottom: 0,\n    borderRightWidth: 1,\n    borderRightColor: COLORS.secondary,\n    backgroundColor: '#f8f8f8'\n  },\n  hourMarker: {\n    position: 'absolute',\n    left: 0,\n    width: 80,\n    alignItems: 'flex-start'\n  },\n  fullHourMarker: {\n    height: 2,\n    backgroundColor: COLORS.secondaryLight,\n    zIndex: 2\n  },\n  halfHourMarker: {\n    height: 1,\n    backgroundColor: 'transparent',\n    zIndex: 1\n  },\n  hourLabel: {\n    marginLeft: 10,\n    transform: [{\n      translateY: -8\n    }],\n    color: COLORS.secondaryDark\n  },\n  fullHourLabel: {\n    fontSize: 12,\n    fontWeight: '500',\n    color: COLORS.secondaryDark\n  },\n  halfHourLabel: {\n    fontSize: 10,\n    color: COLORS.secondaryDark,\n    opacity: 0.7\n  },\n  hourLine: {\n    position: 'absolute',\n    left: 80,\n    right: -500\n  },\n  fullHourLine: {\n    height: 1,\n    backgroundColor: 'rgba(0,0,0,0.08)',\n    zIndex: 2\n  },\n  halfHourLine: {\n    height: 1,\n    backgroundColor: 'rgba(0,0,0,0.03)',\n    borderTopWidth: 1,\n    borderTopColor: 'rgba(0,0,0,0.04)',\n    borderStyle: 'dotted',\n    zIndex: 1\n  },\n  taskBlocksContainer: {\n    position: 'absolute',\n    top: 0,\n    left: 100,\n    right: 10,\n    bottom: 0\n  },\n  taskBlock: {\n    borderRadius: 4,\n    padding: 8,\n    justifyContent: 'center'\n  },\n  taskTitle: {\n    color: COLORS.white,\n    fontWeight: 'bold',\n    fontSize: 12\n  },\n  taskDuration: {\n    color: COLORS.white,\n    fontSize: 10,\n    opacity: 0.9,\n    marginTop: 4\n  },\n  taskCompactText: {\n    color: COLORS.white,\n    fontSize: 11,\n    fontWeight: 'bold',\n    textAlign: 'center',\n    textShadowColor: 'rgba(0, 0, 0, 0.3)',\n    textShadowOffset: {\n      width: 0,\n      height: 1\n    },\n    textShadowRadius: 2\n  }\n});\nexport default DailySchedule;","map":{"version":3,"names":["React","View","Text","StyleSheet","ScrollView","Platform","COLORS","jsx","_jsx","jsxs","_jsxs","Fragment","_Fragment","TOTAL_MINUTES_IN_DAY","PIXELS_PER_HOUR","MINUTES_PER_HOUR","DEFAULT_MIN_TIMELINE_HEIGHT","PADDING_HOURS","DailySchedule","_ref","_ref$tasks","tasks","convertTimeToMinutes","timeString","parts","split","length","_parts","_slicedToArray","time","period","timeParts","hours","parseInt","minutes","isNaN","error","console","getVerticalPosition","startMinutes","relativeMinutes","position","Math","max","round","getDurationHeight","durationMinutes","height","formatTime","floor","mins","displayHours","toString","padStart","checkTaskOverlap","newTask","existingTasks","startTime","duration","overlaps","overlapsWith","newTaskStart","newTaskEnd","task","taskStart","taskEnd","sortedTasks","useMemo","_toConsumableArray","filter","sort","a","b","timeRange","endMinutes","rangeInMinutes","timelineHeight","hourMarkers","earliestTask","latestEndMinutes","forEach","taskStartMinutes","taskEndMinutes","ceil","min","minRangeMinutes","startHour","endHour","hour","hourInMinutes","relativePosition","push","isHalfHour","label","halfHourInMinutes","halfHourRelativePosition","halfHourPosition","displayHour","useEffect","log","style","styles","container","children","title","emptyState","emptyStateText","OS","className","map","marker","i","top","index","topPosition","id","name","taskTitle","taskStartTime","taskDuration","isCompactView","backgroundColor","color","primary","zIndex","mobileTimeline","timelineContent","hourMarkersContainer","hourMarker","halfHourMarker","fullHourMarker","hourLabel","halfHourLabel","fullHourLabel","hourLine","halfHourLine","fullHourLine","taskBlocksContainer","taskBlock","left","right","justifyContent","taskCompactText","numberOfLines","ellipsizeMode","create","cardBackground","borderRadius","padding","marginVertical","shadowColor","black","shadowOffset","width","shadowOpacity","shadowRadius","elevation","borderLeftWidth","borderLeftColor","fontSize","fontWeight","marginBottom","alignItems","secondaryLight","marginTop","secondaryDark","textAlign","fontStyle","flexDirection","bottom","borderRightWidth","borderRightColor","secondary","marginLeft","transform","translateY","opacity","borderTopWidth","borderTopColor","borderStyle","white","textShadowColor","textShadowOffset","textShadowRadius"],"sources":["C:/Users/Seho/Desktop/Seho/Personal Projects/Claude/scheduler_app/src/components/DailySchedule/DailySchedule.js"],"sourcesContent":["import React from 'react';\nimport { View, Text, StyleSheet, ScrollView, Platform } from 'react-native';\nimport COLORS from '../../colors';\nimport '../../../src/styles/components/DailySchedule.css';\n\n// Constants for timeline calculations - defined outside component for StyleSheet access\nconst TOTAL_MINUTES_IN_DAY = 24 * 60; // 24 hours = 1440 minutes\nconst PIXELS_PER_HOUR = 180; // 180 pixels per hour (3 pixels per minute)\nconst MINUTES_PER_HOUR = 60; // Standard minutes per hour\nconst DEFAULT_MIN_TIMELINE_HEIGHT = 1000; // Increased minimum height for better visibility\nconst PADDING_HOURS = 2; // Add 2 hours padding before first task and after last task\n\nconst DailySchedule = ({ tasks = [] }) => {\n  /**\n   * Converts a time string (e.g., \"12:00 AM\") to minutes since midnight\n   * @param {string} timeString - Time in format \"HH:MM AM/PM\"\n   * @return {number} Minutes since midnight\n   */\n  const convertTimeToMinutes = (timeString) => {\n    if (!timeString) return 0;\n    \n    try {\n      // Parse the time string\n      const parts = timeString.split(' ');\n      if (parts.length !== 2) return 0;\n      \n      const [time, period] = parts;\n      const timeParts = time.split(':');\n      if (timeParts.length !== 2) return 0;\n      \n      let hours = parseInt(timeParts[0], 10);\n      let minutes = parseInt(timeParts[1], 10);\n      \n      if (isNaN(hours) || isNaN(minutes)) return 0;\n      \n      // Convert to 24-hour format\n      if (period === 'PM' && hours < 12) {\n        hours += 12;\n      } else if (period === 'AM' && hours === 12) {\n        hours = 0;\n      }\n      \n      // Calculate total minutes since midnight\n      return hours * 60 + minutes;\n    } catch (error) {\n      console.error(\"Error parsing time:\", error);\n      return 0;\n    }\n  };\n  \n  /**\n   * Converts minutes since midnight to a vertical position in pixels\n   * @param {number} minutes - Minutes since midnight\n   * @param {number} startMinutes - Start minutes of the range\n   * @return {number} Vertical position in pixels\n   */\n  const getVerticalPosition = (minutes, startMinutes) => {\n    if (!minutes || isNaN(minutes)) return 0;\n    \n    // Calculate position using same scaling as duration\n    const relativeMinutes = minutes - startMinutes;\n    const position = (relativeMinutes / MINUTES_PER_HOUR) * PIXELS_PER_HOUR;\n    \n    return Math.max(Math.round(position), 0);\n  };\n  \n  /**\n   * Converts duration in minutes to height in pixels\n   * @param {number} durationMinutes - Duration in minutes\n   * @return {number} Height in pixels\n   */\n  const getDurationHeight = (durationMinutes) => {\n    if (!durationMinutes || isNaN(durationMinutes)) return 30; // Minimum default height\n    \n    // Linear scaling: 3 pixels per minute\n    const height = (durationMinutes / MINUTES_PER_HOUR) * PIXELS_PER_HOUR;\n    \n    // Round to nearest pixel, minimum height of 30px for visibility\n    // Even a 10-minute task will be 30px tall (visible but proportional)\n    return Math.max(Math.round(height), 30);\n  };\n  \n  /**\n   * Formats time for display (e.g., 9:30 AM)\n   * @param {number} minutes - Minutes since midnight\n   * @return {string} Formatted time string\n   */\n  const formatTime = (minutes) => {\n    const hours = Math.floor(minutes / 60);\n    const mins = minutes % 60;\n    \n    // Convert to 12-hour format\n    const period = hours >= 12 ? 'PM' : 'AM';\n    const displayHours = hours % 12 === 0 ? 12 : hours % 12;\n    \n    return `${displayHours}:${mins.toString().padStart(2, '0')} ${period}`;\n  };\n  \n  /**\n   * Checks if a new task overlaps with any existing task\n   * @param {Object} newTask - The task to check for overlaps\n   * @param {Array} existingTasks - Array of existing tasks\n   * @return {Object} { overlaps: boolean, overlapsWith: task or null }\n   */\n  const checkTaskOverlap = (newTask, existingTasks) => {\n    if (!newTask || !newTask.startTime || !newTask.duration) {\n      return { overlaps: false, overlapsWith: null };\n    }\n    \n    const newTaskStart = convertTimeToMinutes(newTask.startTime);\n    const newTaskEnd = newTaskStart + (parseInt(newTask.duration, 10) || 0);\n    \n    for (const task of existingTasks) {\n      if (!task || !task.startTime || !task.duration) continue;\n      \n      const taskStart = convertTimeToMinutes(task.startTime);\n      const taskEnd = taskStart + (parseInt(task.duration, 10) || 0);\n      \n      // Check for overlap: new task starts during existing task or ends during existing task\n      // or completely encompasses an existing task\n      if ((newTaskStart >= taskStart && newTaskStart < taskEnd) || \n          (newTaskEnd > taskStart && newTaskEnd <= taskEnd) ||\n          (newTaskStart <= taskStart && newTaskEnd >= taskEnd)) {\n        return { overlaps: true, overlapsWith: task };\n      }\n    }\n    \n    return { overlaps: false, overlapsWith: null };\n  };\n  \n  // Sort tasks by start time with error handling\n  const sortedTasks = React.useMemo(() => {\n    try {\n      return [...tasks].filter(task => task && task.startTime).sort((a, b) => {\n        return convertTimeToMinutes(a.startTime) - convertTimeToMinutes(b.startTime);\n      });\n    } catch (error) {\n      console.error(\"Error sorting tasks:\", error);\n      return [];\n    }\n  }, [tasks]);\n  \n  /**\n   * Calculate the dynamic time range for the schedule\n   * Returns: { startMinutes, endMinutes, rangeInMinutes, timelineHeight, hourMarkers }\n   */\n  const timeRange = React.useMemo(() => {\n    // If no tasks, don't calculate a range\n    if (!sortedTasks.length) {\n      return {\n        startMinutes: 0,\n        endMinutes: 0,\n        rangeInMinutes: 0,\n        timelineHeight: 0,\n        hourMarkers: []\n      };\n    }\n    \n    try {\n      // Find earliest start time\n      const earliestTask = sortedTasks[0]; // Tasks are already sorted by start time\n      let startMinutes = convertTimeToMinutes(earliestTask.startTime);\n      \n      // Round down to the nearest hour for cleaner display and subtract PADDING_HOURS\n      startMinutes = Math.floor(startMinutes / 60) * 60;\n      startMinutes = Math.max(0, startMinutes - (PADDING_HOURS * 60)); // Add padding but don't go below 0\n      \n      // Find latest end time (start time + duration)\n      let latestEndMinutes = 0;\n      sortedTasks.forEach(task => {\n        const taskStartMinutes = convertTimeToMinutes(task.startTime);\n        const taskEndMinutes = taskStartMinutes + (parseInt(task.duration, 10) || 0);\n        latestEndMinutes = Math.max(latestEndMinutes, taskEndMinutes);\n      });\n      \n      // Round up to the nearest hour for cleaner display and add padding\n      latestEndMinutes = Math.ceil(latestEndMinutes / 60) * 60 + (PADDING_HOURS * 60);\n      latestEndMinutes = Math.min(latestEndMinutes, TOTAL_MINUTES_IN_DAY); // Don't exceed 24 hours\n      \n      // Ensure a minimum range of 4 hours for visibility\n      const minRangeMinutes = 4 * 60;\n      const rangeInMinutes = Math.max(latestEndMinutes - startMinutes, minRangeMinutes);\n      \n      // Calculate timeline height using exact hour scaling for perfect alignment\n      const timelineHeight = Math.max(\n        Math.round((rangeInMinutes / 60) * PIXELS_PER_HOUR),\n        DEFAULT_MIN_TIMELINE_HEIGHT\n      );\n      \n      // Calculate hour markers within our range\n      const hourMarkers = [];\n      const startHour = Math.floor(startMinutes / 60);\n      const endHour = Math.ceil(latestEndMinutes / 60);\n      \n      // Add hour markers (and half-hour markers for better readability)\n      for (let hour = startHour; hour <= endHour; hour++) {\n        // Full hour marker\n        const hourInMinutes = hour * 60;\n        const relativePosition = hourInMinutes - startMinutes; // Position relative to our start\n        // Calculate position using exact hour scaling for pixel-perfect alignment\n        const position = Math.round((relativePosition / 60) * PIXELS_PER_HOUR);\n        \n        if (position >= 0) { // Only include hours within our range\n          hourMarkers.push({\n            hour,\n            position,\n            isHalfHour: false,\n            label: hour === 0 || hour === 24 ? '12:00 AM' : \n                   hour === 12 ? '12:00 PM' : \n                   hour > 12 ? `${hour-12}:00 PM` : \n                   `${hour}:00 AM`\n          });\n          \n          // Add half-hour marker if it's within our range\n          const halfHourInMinutes = hourInMinutes + 30;\n          const halfHourRelativePosition = halfHourInMinutes - startMinutes;\n          // Calculate half-hour position using exact hour scaling\n          const halfHourPosition = Math.round((halfHourRelativePosition / 60) * PIXELS_PER_HOUR);\n          \n          if (halfHourPosition >= 0 && halfHourPosition <= timelineHeight && hour < endHour) {\n            const displayHour = hour === 0 || hour === 24 ? 12 : (hour > 12 ? hour-12 : hour);\n            hourMarkers.push({\n              hour: hour + 0.5,\n              position: halfHourPosition,\n              isHalfHour: true,\n              label: `${displayHour}:30 ${hour >= 12 && hour < 24 ? 'PM' : 'AM'}`\n            });\n          }\n        }\n      }\n      \n      return {\n        startMinutes,\n        endMinutes: latestEndMinutes,\n        rangeInMinutes,\n        timelineHeight,\n        hourMarkers\n      };\n    } catch (error) {\n      console.error(\"Error calculating time range:\", error);\n      return {\n        startMinutes: 0,\n        endMinutes: 0,\n        rangeInMinutes: 0,\n        timelineHeight: 0,\n        hourMarkers: []\n      };\n    }\n  }, [sortedTasks]);\n  \n  // Extract values from the calculated time range\n  const { startMinutes, endMinutes, rangeInMinutes, timelineHeight, hourMarkers } = timeRange;\n  \n  // Debug log to check tasks (can remove in production)\n  React.useEffect(() => {\n    console.log(\"Rendered tasks:\", sortedTasks);\n  }, [sortedTasks]);\n  \n  return (\n    <View style={styles.container}>\n      <Text style={styles.title}>Daily Schedule</Text>\n      \n      {/* When there are no tasks, show empty state message */}\n      {sortedTasks.length === 0 ? (\n        <View style={styles.emptyState}>\n          <Text style={styles.emptyStateText}>\n            No tasks scheduled for today. Add tasks to see your daily schedule.\n          </Text>\n        </View>\n      ) : (\n        /* Only render the timeline when tasks exist */\n        <>\n          {/* Web Timeline View */}\n          {Platform.OS === 'web' && (\n            <div className=\"daily-schedule-container\">\n              <div className=\"timeline-container\">\n                {/* Hour markers column */}\n                <div className=\"hour-markers\">\n                  {hourMarkers.map((marker, i) => (\n                    <div \n                      key={i} \n                      className={`hour-marker ${marker.isHalfHour ? 'half-hour-marker' : 'full-hour-marker'}`}\n                      style={{ top: `${marker.position}px` }}\n                    >\n                      <span className={`hour-label ${marker.isHalfHour ? 'half-hour-label' : 'full-hour-label'}`}>\n                        {marker.label}\n                      </span>\n                    </div>\n                  ))}\n                </div>\n                \n                {/* Timeline with tasks - height is dynamically calculated */}\n                <div className=\"timeline\" style={{ height: `${timelineHeight}px` }}>\n                  {/* Hour grid lines */}\n                  {hourMarkers.map((marker, i) => (\n                    <div\n                      key={`grid-${i}`}\n                      className={`hour-grid-line ${marker.isHalfHour ? 'half-hour-grid-line' : 'full-hour-grid-line'}`}\n                      style={{ top: `${marker.position}px` }}\n                    />\n                  ))}\n                  \n                  {/* Task blocks */}\n                  {sortedTasks.map((task, index) => {\n                    if (!task || !task.startTime || !task.duration) {\n                      console.log('Skipping invalid task:', task); // Debug log\n                      return null;\n                    }\n                    \n                    try {\n                      // Calculate position relative to our dynamic range start\n                      const taskStartMinutes = convertTimeToMinutes(task.startTime);\n                      const topPosition = getVerticalPosition(taskStartMinutes, startMinutes);\n                      const height = getDurationHeight(parseInt(task.duration, 10) || 30);\n                      \n                      // For debugging\n                      console.log('Rendering task:', { \n                        index,\n                        id: task.id,\n                        name: task.name,\n                        title: task.title,\n                        startTime: task.startTime,\n                        duration: task.duration,\n                        topPosition,\n                        height\n                      });\n                      \n                      // Ensure text data is available\n                      const taskTitle = task.title || task.name || 'Untitled Task';\n                      const taskStartTime = task.startTime || 'No time set';\n                      const taskDuration = task.duration ? `${task.duration} min` : 'No duration';\n                      \n                      // Check if the task block is too small for two lines of text\n                      const isCompactView = height < 50;  // 50px threshold for compact view\n\n                      return (\n                        <div\n                          key={task.id || index}\n                          className={`task-block ${isCompactView ? 'task-block-compact' : ''}`}\n                          style={{\n                            top: `${topPosition}px`,\n                            height: `${height}px`,\n                            backgroundColor: task.color || COLORS.primary,\n                            zIndex: 10 // Ensure task blocks are above grid lines\n                          }}\n                        >\n                          {isCompactView ? (\n                            // Compact view: all info on one line with ellipsis\n                            <div className=\"task-compact-content\">\n                              {taskTitle} • {taskStartTime} • {taskDuration}\n                            </div>\n                          ) : (\n                            // Regular view: title and details on separate lines\n                            <>\n                              <div className=\"task-title\">\n                                {taskTitle}\n                              </div>\n                              <div className=\"task-details\">\n                                {taskStartTime} • {taskDuration}\n                              </div>\n                            </>\n                          )}\n                        </div>\n                      );\n                    } catch (error) {\n                      console.error(\"Error rendering task:\", error, task);\n                      return null;\n                    }\n                  })}\n                  \n                  {/* Time range information (can be removed in production) */}\n                  <div className=\"time-range-info\">\n                    <small>\n                      {formatTime(startMinutes)} - {formatTime(endMinutes)}\n                    </small>\n                  </div>\n                </div>\n              </div>\n            </div>\n          )}\n          \n          {/* Mobile Timeline View */}\n          {Platform.OS !== 'web' && (\n            <ScrollView style={styles.mobileTimeline}>\n              <View style={[styles.timelineContent, { height: timelineHeight }]}>\n                {/* Hour markers for mobile */}\n                <View style={styles.hourMarkersContainer}>\n                  {hourMarkers.map((marker, i) => (\n                    <View \n                      key={i} \n                      style={[\n                        styles.hourMarker,\n                        marker.isHalfHour ? styles.halfHourMarker : styles.fullHourMarker,\n                        { top: marker.position }\n                      ]}\n                    >\n                      <Text \n                        style={[\n                          styles.hourLabel,\n                          marker.isHalfHour ? styles.halfHourLabel : styles.fullHourLabel\n                        ]}\n                      >\n                        {marker.label}\n                      </Text>\n                      <View \n                        style={[\n                          styles.hourLine,\n                          marker.isHalfHour ? styles.halfHourLine : styles.fullHourLine\n                        ]} \n                      />\n                    </View>\n                  ))}\n                </View>\n                \n                {/* Task blocks for mobile */}\n                <View style={styles.taskBlocksContainer}>\n                  {sortedTasks.map((task, index) => {\n                    if (!task || !task.startTime || !task.duration) {\n                      return null; // Skip invalid tasks\n                    }\n                    \n                    try {\n                      const taskStartMinutes = convertTimeToMinutes(task.startTime);\n                      const topPosition = getVerticalPosition(taskStartMinutes, startMinutes);\n                      const duration = parseInt(task.duration, 10) || 30;\n                      const height = getDurationHeight(duration);\n                      \n                      // Ensure text data is available\n                      const taskTitle = task.title || task.name || 'Untitled Task';\n                      const taskStartTime = task.startTime || 'No time set';\n                      const taskDuration = task.duration ? `${task.duration} min` : 'No duration';\n                      \n                      // Check if the task block is too small for two lines of text\n                      const isCompactView = height < 50;  // 50px threshold for compact view\n                      \n                      return (\n                        <View\n                          key={task.id || index}\n                          style={[\n                            styles.taskBlock,\n                            {\n                              position: 'absolute',\n                              top: topPosition,\n                              height: height,\n                              left: 0,\n                              right: 0,\n                              backgroundColor: task.color || COLORS.primary,\n                              zIndex: 10, // Ensure task blocks appear above grid lines\n                              justifyContent: 'center' // Center content vertically\n                            }\n                          ]}\n                        >\n                          {isCompactView ? (\n                            // Compact view: single line with all information\n                            <Text style={styles.taskCompactText} numberOfLines={1} ellipsizeMode=\"tail\">\n                              {taskTitle} • {taskStartTime} • {taskDuration}\n                            </Text>\n                          ) : (\n                            // Regular view: title and details on separate lines\n                            <>\n                              <Text style={styles.taskTitle} numberOfLines={1}>\n                                {taskTitle}\n                              </Text>\n                              <Text style={styles.taskDuration}>\n                                {taskStartTime} • {taskDuration}\n                              </Text>\n                            </>\n                          )}\n                        </View>\n                      );\n                    } catch (error) {\n                      console.error(\"Error rendering mobile task:\", error, task);\n                      return null;\n                    }\n                  })}\n                </View>\n              </View>\n            </ScrollView>\n          )}\n        </>\n      )}\n    </View>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    backgroundColor: COLORS.cardBackground,\n    borderRadius: 12,\n    padding: 16,\n    marginVertical: 10,\n    shadowColor: COLORS.black,\n    shadowOffset: { width: 0, height: 2 },\n    shadowOpacity: 0.1,\n    shadowRadius: 4,\n    elevation: 3,\n    borderLeftWidth: 4,\n    borderLeftColor: COLORS.primary,\n  },\n  title: {\n    fontSize: 18,\n    fontWeight: 'bold',\n    marginBottom: 15,\n    color: COLORS.black,\n  },\n  emptyState: {\n    padding: 20,\n    alignItems: 'center',\n    justifyContent: 'center',\n    backgroundColor: COLORS.secondaryLight,\n    borderRadius: 8,\n    marginTop: 20,\n  },\n  emptyStateText: {\n    color: COLORS.secondaryDark,\n    textAlign: 'center',\n    fontStyle: 'italic',\n  },\n  \n  // Mobile-specific styles for vertical timeline\n  mobileTimeline: {\n    height: 1000, // Increased fixed height with scroll to match new larger scale\n    marginVertical: 10,\n  },\n  timelineContent: {\n    position: 'relative',\n    flexDirection: 'row',\n  },\n  hourMarkersContainer: {\n    width: 90, // Increased width for better readability\n    position: 'absolute',\n    top: 0,\n    left: 0,\n    bottom: 0,\n    borderRightWidth: 1,\n    borderRightColor: COLORS.secondary,\n    backgroundColor: '#f8f8f8', // Light background for time markers\n  },\n  hourMarker: {\n    position: 'absolute',\n    left: 0,\n    width: 80,\n    alignItems: 'flex-start',\n  },\n  fullHourMarker: {\n    height: 2,\n    backgroundColor: COLORS.secondaryLight,\n    zIndex: 2,\n  },\n  halfHourMarker: {\n    height: 1,\n    backgroundColor: 'transparent',\n    zIndex: 1,\n  },\n  hourLabel: {\n    marginLeft: 10,\n    transform: [{ translateY: -8 }], // Adjust for vertical alignment\n    color: COLORS.secondaryDark,\n  },\n  fullHourLabel: {\n    fontSize: 12,\n    fontWeight: '500',\n    color: COLORS.secondaryDark,\n  },\n  halfHourLabel: {\n    fontSize: 10,\n    color: COLORS.secondaryDark,\n    opacity: 0.7,\n  },\n  hourLine: {\n    position: 'absolute',\n    left: 80,\n    right: -500, // Extend across timeline\n  },\n  fullHourLine: {\n    height: 1,\n    backgroundColor: 'rgba(0,0,0,0.08)',\n    zIndex: 2,\n  },\n  halfHourLine: {\n    height: 1,\n    backgroundColor: 'rgba(0,0,0,0.03)',\n    borderTopWidth: 1,\n    borderTopColor: 'rgba(0,0,0,0.04)',\n    borderStyle: 'dotted',\n    zIndex: 1,\n  },\n  taskBlocksContainer: {\n    position: 'absolute',\n    top: 0,\n    left: 100, // Offset from hour markers (increased to match wider time column)\n    right: 10,\n    bottom: 0,\n  },\n  taskBlock: {\n    borderRadius: 4,\n    padding: 8,\n    justifyContent: 'center',\n  },\n  taskTitle: {\n    color: COLORS.white,\n    fontWeight: 'bold',\n    fontSize: 12,\n  },\n  taskDuration: {\n    color: COLORS.white,\n    fontSize: 10,\n    opacity: 0.9,\n    marginTop: 4,\n  },\n  taskCompactText: {\n    color: COLORS.white,\n    fontSize: 11,\n    fontWeight: 'bold',\n    textAlign: 'center',\n    textShadowColor: 'rgba(0, 0, 0, 0.3)',\n    textShadowOffset: { width: 0, height: 1 },\n    textShadowRadius: 2,\n  },\n});\n\nexport default DailySchedule;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}